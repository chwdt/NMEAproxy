/*
 * NMEAproxy.java
 *
 * Created on July 16, 2010, 12:53 PM
 */

package net.brainaid.sol.NMEAproxy;

import java.io.*;
import java.net.*;
import java.security.MessageDigest;
import java.util.Timer;
import java.util.*;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import java.util.zip.InflaterInputStream;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import net.brainaid.sol.NMEAproxy.SortedListModel.SortOrder;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 *
 * @author  cw@brainaid.dk
 */
public class NMEAproxy extends javax.swing.JFrame {
    
    private static void setupEnterActionForAllButtons() {
        InputMap im = (InputMap) UIManager.getDefaults().get("Button.focusInputMap");
        Object pressedAction = im.get(KeyStroke.getKeyStroke("pressed SPACE"));
        Object releasedAction = im.get(KeyStroke.getKeyStroke("released SPACE"));

        im.put(KeyStroke.getKeyStroke("pressed ENTER"), pressedAction);
        im.put(KeyStroke.getKeyStroke("released ENTER"), releasedAction);
        
        im = (InputMap) UIManager.getDefaults().get("ToggleButton.focusInputMap");
        pressedAction = im.get(KeyStroke.getKeyStroke("pressed SPACE"));
        releasedAction = im.get(KeyStroke.getKeyStroke("released SPACE"));

        im.put(KeyStroke.getKeyStroke("pressed ENTER"), pressedAction);
        im.put(KeyStroke.getKeyStroke("released ENTER"), releasedAction);

    }

    /** Creates new form NMEAproxy */
    public NMEAproxy() {
        initComponents();

        aisFilterDialog.setVisible(false);
        aisFilterDialog.getRootPane().setDefaultButton(aisFilterOkButton);
        aisFilterDialog.pack();
        
        passwordText.getDocument().addDocumentListener(new PasswordListener());
        nmeaPortText.getDocument().addDocumentListener(new NMEAPortListener());
        getRootPane().setDefaultButton(loginButton);
    }
    
    public String getServer() {
        return "www.sailonline.org";
    }
    
    public String getVersion() {
        String dt = "$Date: 2025/01/10 09:34:45 $";
        
        return dt.substring(dt.indexOf(':') + 2, dt.lastIndexOf('$') - 1);
    }
    
    public String getFrameTitle() {
        return "brainaid NMEA proxy " + getVersion();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    @SuppressWarnings("unchecked")
    private void initComponents() {

        aisFilterDialog = new javax.swing.JDialog();
        aisFilterOkButton = new javax.swing.JButton();
        aisFilterCancelButton = new javax.swing.JButton();
        aisGlobalFilterPanel = new javax.swing.JPanel();
        aisOwnShipCheckBox = new javax.swing.JCheckBox();
        aisNotStartedCheckBox = new javax.swing.JCheckBox();
        aisFinishedCheckBox = new javax.swing.JCheckBox();
        aisSelectedFilterPanel = new javax.swing.JPanel();
        selectedBoatsScrollPane = new javax.swing.JScrollPane();
        selectedBoatsList = new javax.swing.JList();
        allBoatsScrollPane = new javax.swing.JScrollPane();
        allBoatsList = new javax.swing.JList();
        removeBoat = new javax.swing.JButton();
        addBoat = new javax.swing.JButton();
        aisSendSelectedCheckBox = new javax.swing.JCheckBox();
        aisRadiusFilterPanel = new javax.swing.JPanel();
        aisSendRadiusCheckBox = new javax.swing.JCheckBox();
        aisRadiusText = new javax.swing.JTextField();
        aisRadiusUnitLabel = new javax.swing.JLabel();
        aisRankingFilterPanel = new javax.swing.JPanel();
        aisSendRankingCheckBox = new javax.swing.JCheckBox();
        aisRankingStartText = new javax.swing.JTextField();
        aisRankingToLabel = new javax.swing.JLabel();
        aisRankingEndText = new javax.swing.JTextField();
        raceLabel = new javax.swing.JLabel();
        boatLabel = new javax.swing.JLabel();
        instrumentsPanel = new javax.swing.JPanel();
        nmeaAddressLabel = new javax.swing.JLabel();
        nmeaPortLabel = new javax.swing.JLabel();
        ipAddressText = new javax.swing.JTextField();
        nmeaPortText = new javax.swing.JTextField();
        nmeaConnLabel = new javax.swing.JLabel();
        aisPanel = new javax.swing.JPanel();
        useNMEACheckBox = new javax.swing.JCheckBox();
        aisPortLabel = new javax.swing.JLabel();
        aisPortText = new javax.swing.JTextField();
        aisConnLabel = new javax.swing.JLabel();
        aisFilterButton = new javax.swing.JButton();
        sendButton = new javax.swing.JToggleButton();
        quitButton = new javax.swing.JButton();
        passwordLabel = new javax.swing.JLabel();
        passwordText = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();

        aisFilterDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        aisFilterDialog.setTitle("AIS Filter");
        aisFilterDialog.setModal(true);
        aisFilterDialog.setResizable(false);

        aisFilterOkButton.setText("OK");
        aisFilterOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aisFilterOkButtonActionPerformed(evt);
            }
        });

        aisFilterCancelButton.setText("Cancel");
        aisFilterCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aisFilterCancelButtonActionPerformed(evt);
            }
        });

        aisGlobalFilterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        aisOwnShipCheckBox.setText("Send own ship");

        aisNotStartedCheckBox.setText("Send not started");

        aisFinishedCheckBox.setText("Send finished");

        GroupLayout aisGlobalFilterPanelLayout = new GroupLayout(aisGlobalFilterPanel);
        aisGlobalFilterPanel.setLayout(aisGlobalFilterPanelLayout);
        aisGlobalFilterPanelLayout.setHorizontalGroup(
            aisGlobalFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisGlobalFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aisGlobalFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(aisNotStartedCheckBox)
                    .addComponent(aisFinishedCheckBox)
                    .addComponent(aisOwnShipCheckBox))
                .addContainerGap(362, Short.MAX_VALUE))
        );
        aisGlobalFilterPanelLayout.setVerticalGroup(
            aisGlobalFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisGlobalFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aisOwnShipCheckBox)
                .addGap(4, 4, 4)
                .addComponent(aisNotStartedCheckBox)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aisFinishedCheckBox)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aisSelectedFilterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        selectedBoatsList.setModel(selectedBoatListModel);
        selectedBoatsScrollPane.setViewportView(selectedBoatsList);

        allBoatsList.setModel(allBoatListModel);
        allBoatsScrollPane.setViewportView(allBoatsList);

        removeBoat.setText(">");
        removeBoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBoatActionPerformed(evt);
            }
        });

        addBoat.setText("<");
        addBoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBoatActionPerformed(evt);
            }
        });

        aisSendSelectedCheckBox.setText("Send selected:");
        aisSendSelectedCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 0, 2, 2));
        aisSendSelectedCheckBox.setMargin(new java.awt.Insets(2, 0, 2, 2));
        aisSendSelectedCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                aisSendSelectedCheckBoxStateChanged(evt);
            }
        });

        GroupLayout aisSelectedFilterPanelLayout = new GroupLayout(aisSelectedFilterPanel);
        aisSelectedFilterPanel.setLayout(aisSelectedFilterPanelLayout);
        aisSelectedFilterPanelLayout.setHorizontalGroup(
            aisSelectedFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisSelectedFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aisSelectedFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(aisSelectedFilterPanelLayout.createSequentialGroup()
                        .addComponent(selectedBoatsScrollPane, GroupLayout.PREFERRED_SIZE, 196, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(aisSelectedFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(addBoat)
                            .addComponent(removeBoat))
                        .addGap(12, 12, 12)
                        .addComponent(allBoatsScrollPane, GroupLayout.PREFERRED_SIZE, 196, GroupLayout.PREFERRED_SIZE))
                    .addComponent(aisSendSelectedCheckBox))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aisSelectedFilterPanelLayout.linkSize(SwingConstants.HORIZONTAL, allBoatsScrollPane, selectedBoatsScrollPane);

        aisSelectedFilterPanelLayout.setVerticalGroup(
            aisSelectedFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisSelectedFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aisSelectedFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, aisSelectedFilterPanelLayout.createSequentialGroup()
                        .addComponent(addBoat)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeBoat)
                        .addGap(52, 52, 52))
                    .addGroup(aisSelectedFilterPanelLayout.createSequentialGroup()
                        .addComponent(aisSendSelectedCheckBox)
                        .addGap(8, 8, 8)
                        .addGroup(aisSelectedFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(allBoatsScrollPane)
                            .addComponent(selectedBoatsScrollPane))
                        .addContainerGap())))
        );

        aisRadiusFilterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        aisSendRadiusCheckBox.setText("Send within DTG radius:");
        aisSendRadiusCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                aisSendRadiusCheckBoxStateChanged(evt);
            }
        });

        aisRadiusText.setColumns(8);
        aisRadiusText.setFont(new java.awt.Font("Monospaced", 0, 11));
        aisRadiusText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        aisRadiusText.setText("5.0");
        aisRadiusText.setInputVerifier(new DoubleVerifier());

        aisRadiusUnitLabel.setText("nm");

        GroupLayout aisRadiusFilterPanelLayout = new GroupLayout(aisRadiusFilterPanel);
        aisRadiusFilterPanel.setLayout(aisRadiusFilterPanelLayout);
        aisRadiusFilterPanelLayout.setHorizontalGroup(
            aisRadiusFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisRadiusFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aisSendRadiusCheckBox)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aisRadiusText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aisRadiusUnitLabel)
                .addContainerGap(232, Short.MAX_VALUE))
        );
        aisRadiusFilterPanelLayout.setVerticalGroup(
            aisRadiusFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisRadiusFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aisRadiusFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(aisSendRadiusCheckBox)
                    .addComponent(aisRadiusText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(aisRadiusUnitLabel))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aisRankingFilterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        aisSendRankingCheckBox.setText("Send ranking places from:");
        aisSendRankingCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                aisSendRankingCheckBoxStateChanged(evt);
            }
        });

        aisRankingStartText.setColumns(5);
        aisRankingStartText.setFont(new java.awt.Font("Monospaced", 0, 11));
        aisRankingStartText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        aisRankingStartText.setText("1");
        aisRankingStartText.setInputVerifier(new LongVerifier());

        aisRankingToLabel.setText("to");

        aisRankingEndText.setColumns(5);
        aisRankingEndText.setFont(new java.awt.Font("Monospaced", 0, 11));
        aisRankingEndText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        aisRankingEndText.setText("10");
        aisRankingEndText.setInputVerifier(new LongVerifier());

        GroupLayout aisRankingFilterPanelLayout = new GroupLayout(aisRankingFilterPanel);
        aisRankingFilterPanel.setLayout(aisRankingFilterPanelLayout);
        aisRankingFilterPanelLayout.setHorizontalGroup(
            aisRankingFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisRankingFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aisSendRankingCheckBox)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aisRankingStartText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aisRankingToLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aisRankingEndText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(196, Short.MAX_VALUE))
        );
        aisRankingFilterPanelLayout.setVerticalGroup(
            aisRankingFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisRankingFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aisRankingFilterPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(aisSendRankingCheckBox)
                    .addComponent(aisRankingStartText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(aisRankingToLabel)
                    .addComponent(aisRankingEndText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout aisFilterDialogLayout = new GroupLayout(aisFilterDialog.getContentPane());
        aisFilterDialog.getContentPane().setLayout(aisFilterDialogLayout);
        aisFilterDialogLayout.setHorizontalGroup(
            aisFilterDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aisFilterDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(aisRankingFilterPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aisGlobalFilterPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aisRadiusFilterPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aisSelectedFilterPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, aisFilterDialogLayout.createSequentialGroup()
                        .addComponent(aisFilterCancelButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(aisFilterOkButton)))
                .addContainerGap())
        );

        aisFilterDialogLayout.linkSize(SwingConstants.HORIZONTAL, aisFilterCancelButton, aisFilterOkButton);

        aisFilterDialogLayout.setVerticalGroup(
            aisFilterDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aisGlobalFilterPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(aisRankingFilterPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aisRadiusFilterPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aisSelectedFilterPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(aisFilterDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(aisFilterOkButton, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                    .addComponent(aisFilterCancelButton))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(getFrameTitle());
        setResizable(false);

        raceLabel.setText("257");

        boatLabel.setText("brainaid");

        instrumentsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Instruments"));
        instrumentsPanel.setEnabled(false);

        nmeaAddressLabel.setText("IP:");
        nmeaAddressLabel.setEnabled(false);

        nmeaPortLabel.setText("Port:");
        nmeaPortLabel.setEnabled(false);

        ipAddressText.setEditable(false);
        ipAddressText.setText("0.0.0.0");
        ipAddressText.setEnabled(false);

        nmeaPortText.setColumns(5);
        nmeaPortText.setFont(new java.awt.Font("Monospaced", 0, 11));
        nmeaPortText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        nmeaPortText.setText("5010");
        nmeaPortText.setEnabled(false);
        nmeaPortText.setInputVerifier(new ShortVerifier());

        GroupLayout instrumentsPanelLayout = new GroupLayout(instrumentsPanel);
        instrumentsPanel.setLayout(instrumentsPanelLayout);
        instrumentsPanelLayout.setHorizontalGroup(
            instrumentsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(instrumentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(instrumentsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(nmeaAddressLabel)
                    .addComponent(nmeaPortLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(instrumentsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(instrumentsPanelLayout.createSequentialGroup()
                        .addComponent(nmeaPortText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nmeaConnLabel))
                    .addComponent(ipAddressText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        instrumentsPanelLayout.setVerticalGroup(
            instrumentsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(instrumentsPanelLayout.createSequentialGroup()
                .addGroup(instrumentsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(nmeaAddressLabel)
                    .addComponent(ipAddressText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(instrumentsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(nmeaPortLabel, GroupLayout.PREFERRED_SIZE, 13, GroupLayout.PREFERRED_SIZE)
                    .addComponent(nmeaPortText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(nmeaConnLabel))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "AIS"));

        useNMEACheckBox.setText("Use Instruments Port");
        useNMEACheckBox.setEnabled(false);
        useNMEACheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        useNMEACheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                useNMEACheckBoxItemStateChanged(evt);
            }
        });

        aisPortLabel.setText("Port:");
        aisPortLabel.setEnabled(false);

        aisPortText.setColumns(5);
        aisPortText.setFont(new java.awt.Font("Monospaced", 0, 11));
        aisPortText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        aisPortText.setText("5011");
        aisPortText.setEnabled(false);
        aisPortText.setInputVerifier(new ShortVerifier());

        aisFilterButton.setText("Filter");
        aisFilterButton.setEnabled(false);
        aisFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aisFilterButtonActionPerformed(evt);
            }
        });

        GroupLayout aisPanelLayout = new GroupLayout(aisPanel);
        aisPanel.setLayout(aisPanelLayout);
        aisPanelLayout.setHorizontalGroup(
            aisPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aisPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(aisPanelLayout.createSequentialGroup()
                        .addComponent(useNMEACheckBox)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                        .addComponent(aisFilterButton))
                    .addGroup(aisPanelLayout.createSequentialGroup()
                        .addComponent(aisPortLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(aisPortText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(aisConnLabel)))
                .addContainerGap())
        );
        aisPanelLayout.setVerticalGroup(
            aisPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aisPanelLayout.createSequentialGroup()
                .addGroup(aisPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(useNMEACheckBox)
                    .addComponent(aisFilterButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(aisPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(aisPortLabel)
                    .addComponent(aisPortText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(aisConnLabel))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sendButton.setText("Start");
        sendButton.setEnabled(false);
        sendButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sendButtonItemStateChanged(evt);
            }
        });

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        passwordLabel.setText("Password:");

        passwordText.setColumns(12);

        loginButton.setText("Login");
        loginButton.setEnabled(false);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boatLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 287, Short.MAX_VALUE)
                        .addComponent(raceLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 270, Short.MAX_VALUE)
                        .addComponent(quitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passwordText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                        .addComponent(loginButton))
                    .addComponent(aisPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(instrumentsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(SwingConstants.HORIZONTAL, loginButton, quitButton, sendButton);

        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(boatLabel)
                    .addComponent(raceLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(instrumentsPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aisPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(quitButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        aisFilterDialog.dispose();
        dispose();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void useNMEACheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_useNMEACheckBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            aisPortText.setEditable(false);
            aisPortText.setText(nmeaPortText.getText());
        } else {
            short nmeaPort, aisPort;
            nmeaPort = Short.parseShort(nmeaPortText.getText());
            aisPort = Short.parseShort(aisPortText.getText());
            if (aisPort == nmeaPort) {
                aisPort++;
                aisPortText.setText(Short.toString(aisPort));
            }
            aisPortText.setEditable(true);
        }
    }//GEN-LAST:event_useNMEACheckBoxItemStateChanged

    private void sendButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sendButtonItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            // Start sending
            System.out.println("start sending ...");
            
            nmeaPortText.setEditable(false);
            aisPortText.setEditable(false);
            useNMEACheckBox.setEnabled(false);
            
            globalprefs.putBoolean("aisUseNMEAPort", useNMEACheckBox.isSelected());
            globalprefs.put("nmeaPort", nmeaPortText.getText());
            globalprefs.put("aisPort", aisPortText.getText());
            
            getBoatTimer = new Timer(true);
            getRaceTimer = new Timer(true);
            getCourseTimer = new Timer(true);
            getAlmanacTimer = new Timer(true);
            
            getBoatTimer.scheduleAtFixedRate(new BoatTask(), 0, 10 * 1000);
            getRaceTimer.scheduleAtFixedRate(new RaceTask(), 5, 60 * 1000);
            getCourseTimer.scheduleAtFixedRate(new CourseTask(), 0, 300 * 1000);
            getAlmanacTimer.scheduleAtFixedRate(new AlmanacTask(), 0, 3600 * 1000);
            
            nmeaListener = new NMEAListener();
            nmeaListener.setDaemon(true);
            nmeaListener.start();
            if (! useNMEACheckBox.isSelected()) {
                aisListener = new AISListener();
                aisListener.setDaemon(true);
                aisListener.start();
            } else {
                aisListener = null;
            }
            
            sendButton.setText("Stop");
        } else {
            // Stop sending
            System.out.println("stop sending ...");
            try {
                nmeaListener.stopServer();
                nmeaListener.join();
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (null != aisListener) {
                try {
                    aisListener.stopServer();
                    aisListener.join();
                } catch (Exception ex) {
                    Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            getBoatTimer.cancel();
            getRaceTimer.cancel();
            getCourseTimer.cancel();
            getAlmanacTimer.cancel();
             
            nmeaPortText.setEditable(true);
            aisPortText.setEditable(true);
            useNMEACheckBox.setEnabled(true);
            
            sendButton.setText("Start");
        }
    }//GEN-LAST:event_sendButtonItemStateChanged

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        DocumentLoader loader;
        DocumentBuilder builder;
        Document doc;
        Element node, racenode, wpt;
        String location;
        int race;
        String boat;
        long id;
        
        race = Integer.parseInt(raceLabel.getText());
        boat = boatLabel.getText();
        
        sol = new SolLogin(race, boat);

        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            builder = factory.newDocumentBuilder();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        sol.write_lock();
        sol.login();
        sol.read_lock();
        sol.write_unlock();
        
        if (null == sol.token) {
            sol.read_unlock();
            return;
        }
        
        location = String.format("https://%s/webclient/auth_raceinfo_%d.xml?token=%s",
                                 getServer(), sol.getRace(), sol.getToken());
        System.out.printf("getRace: %s\n", location);

        try {
            loader = new DocumentLoader(location);
            loader.connect();
            doc = builder.parse(loader.getInputStream());
            loader.disconnect();
        } catch (Exception ex) {
            Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
            sol.read_unlock();
            return;
        }
        
        sol.read_unlock();
        
        racenode = (Element) doc.getElementsByTagName("race").item(0);
        id = childGetLong(racenode, "id");
        node = (Element) racenode.getElementsByTagName("name").item(0);
        
        raceData.write_lock();
        
        raceData.id = id;
        raceData.name = node.getTextContent();
        raceData.nmea_name = toNMEA(raceData.name);
        
        node = (Element) racenode.getElementsByTagName("message").item(0);
        raceData.updateSafety(node.getTextContent());

        raceLabel.setText(raceData.name);
        
        raceData.write_unlock();
        
        nmeaAddressLabel.setEnabled(true);
        nmeaPortLabel.setEnabled(true);
        ipAddressText.setEnabled(true);
        nmeaPortText.setEnabled(true);
        
        useNMEACheckBox.setEnabled(true);
        aisPortLabel.setEnabled(true);
        aisPortText.setEnabled(true);
        aisFilterButton.setEnabled(true);
        
        sendButton.setEnabled(true);
        loginButton.setEnabled(false);
        passwordText.setEnabled(false);
        gui.getRootPane().setDefaultButton(null);
        
        pack();
    }//GEN-LAST:event_loginButtonActionPerformed

    @SuppressWarnings("unchecked")
    private void aisFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aisFilterButtonActionPerformed
        // TODO add your handling code here:
        aisOwnShipCheckBox.setSelected(aisSendOwnShip);
        aisNotStartedCheckBox.setSelected(aisSendNotStarted);
        aisFinishedCheckBox.setSelected(aisSendFinished);
        aisSendSelectedCheckBox.setSelected(aisSendSelected);
        
        aisSendRadiusCheckBox.setSelected(aisSendRadius);
        aisRadiusText.setText(String.format("%.2f", aisRadius));
        
        aisSendRankingCheckBox.setSelected(aisSendRanking);
        aisRankingStartText.setText(String.format("%d", aisRankingStart));
        aisRankingEndText.setText(String.format("%d", aisRankingEnd));
        
        unsortedSelectedBoatListModel.clear();
        Object [] element = aisFilterBoatListModel.toArray();
        for (Object element1 : element) {
            unsortedSelectedBoatListModel.addElement(element1);
        }
        
        aisFilterDialog.pack();
        aisFilterDialog.setVisible(true);
    }//GEN-LAST:event_aisFilterButtonActionPerformed

    @SuppressWarnings("unchecked")
    private void aisFilterOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aisFilterOkButtonActionPerformed
        // TODO add your handling code here:
        aisSendOwnShip = aisOwnShipCheckBox.isSelected();
        aisSendNotStarted = aisNotStartedCheckBox.isSelected();
        aisSendFinished = aisFinishedCheckBox.isSelected();
        
        aisSelectedBoats = "";
        
        aisFilterBoatListModel.clear();
        Object [] element = unsortedSelectedBoatListModel.toArray();
        for (Object element1 : element) {
            RaceData.BoatPosition boat = (NMEAproxy.RaceData.BoatPosition) element1;
            aisFilterBoatListModel.addElement(boat);
            aisSelectedBoats += String.format(" %d", boat.id);
        }
        aisSelectedBoats += " ";
        aisSendSelected = aisSendSelectedCheckBox.isSelected();
        
        aisSendRadius = aisSendRadiusCheckBox.isSelected();
        try {
            aisRadius = Double.parseDouble(aisRadiusText.getText());
        } catch (NumberFormatException e) {
            aisRadius = 0.0;
        }
        
        aisSendRanking = aisSendRankingCheckBox.isSelected();
        try {
            aisRankingStart = Long.parseLong(aisRankingStartText.getText());
        } catch (Exception e) {
            aisRankingStart = 0;
        }
        try {
            aisRankingEnd = Long.parseLong(aisRankingEndText.getText());
        } catch (Exception e) {
            aisRankingEnd = 0;
        }
        
        boatprefs.putBoolean("aisSendOwnShip", aisSendOwnShip);
        boatprefs.putBoolean("aisSendNotStarted", aisSendNotStarted);
        boatprefs.putBoolean("aisSendFinished", aisSendFinished);
        boatprefs.putBoolean("aisSendSelected", aisSendSelected);
        boatprefs.putBoolean("aisSendRadius", aisSendRadius);
        boatprefs.putBoolean("aisSendRanking", aisSendRanking);
        boatprefs.put("aisRadius", aisRadiusText.getText());
        boatprefs.put("aisRankingStart", aisRankingStartText.getText());
        boatprefs.put("aisRankingEnd", aisRankingEndText.getText());
        boatprefs.put("aisSelectedBoats", aisSelectedBoats);

        aisFilterDialog.setVisible(false);
    }//GEN-LAST:event_aisFilterOkButtonActionPerformed

    private void aisFilterCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aisFilterCancelButtonActionPerformed
        // TODO add your handling code here:
        aisFilterDialog.setVisible(false);
}//GEN-LAST:event_aisFilterCancelButtonActionPerformed

    @SuppressWarnings({"unchecked", "unchecked"})
    private void addBoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBoatActionPerformed
        // TODO add your handling code here:
        int [] selection = allBoatsList.getSelectedIndices();
        for (int i : selection) {
            if (!unsortedSelectedBoatListModel.contains(allBoatsList.getComponent(i))) {
                unsortedSelectedBoatListModel.addElement(allBoatsList.getComponent(i));
            }
        }
}//GEN-LAST:event_addBoatActionPerformed

    private void removeBoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBoatActionPerformed
        // TODO add your handling code here:
        int [] selection = selectedBoatsList.getSelectedIndices();
        for (int i : selection) {
            unsortedSelectedBoatListModel.removeElement(selectedBoatsList.getComponent(i));
        }
    }//GEN-LAST:event_removeBoatActionPerformed

    private void aisSendSelectedCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_aisSendSelectedCheckBoxStateChanged
        // TODO add your handling code here:
        if (aisSendSelectedCheckBox.isSelected()) {
            aisOwnShipCheckBox.setEnabled(false);
            aisNotStartedCheckBox.setEnabled(false);
            aisFinishedCheckBox.setEnabled(false);
        } else if (!aisSendRadiusCheckBox.isSelected() && !aisSendRankingCheckBox.isSelected()) {
            aisOwnShipCheckBox.setEnabled(true);
            aisNotStartedCheckBox.setEnabled(true);
            aisFinishedCheckBox.setEnabled(true);
        }
    }//GEN-LAST:event_aisSendSelectedCheckBoxStateChanged

    private void aisSendRadiusCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_aisSendRadiusCheckBoxStateChanged
        // TODO add your handling code here:
        if (aisSendRadiusCheckBox.isSelected()) {
            aisOwnShipCheckBox.setEnabled(false);
            aisNotStartedCheckBox.setEnabled(false);
            aisFinishedCheckBox.setEnabled(false);
        } else if (!aisSendSelectedCheckBox.isSelected() && !aisSendRankingCheckBox.isSelected()) {
            aisOwnShipCheckBox.setEnabled(true);
            aisNotStartedCheckBox.setEnabled(true);
            aisFinishedCheckBox.setEnabled(true);
        }
    }//GEN-LAST:event_aisSendRadiusCheckBoxStateChanged

    private void aisSendRankingCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_aisSendRankingCheckBoxStateChanged
        // TODO add your handling code here:
        if (aisSendRankingCheckBox.isSelected()) {
            aisOwnShipCheckBox.setEnabled(false);
            aisNotStartedCheckBox.setEnabled(false);
            aisFinishedCheckBox.setEnabled(false);
        } else if (!aisSendSelectedCheckBox.isSelected() && !aisSendRadiusCheckBox.isSelected()) {
            aisOwnShipCheckBox.setEnabled(true);
            aisNotStartedCheckBox.setEnabled(true);
            aisFinishedCheckBox.setEnabled(true);
        }
    }//GEN-LAST:event_aisSendRankingCheckBoxStateChanged

    class PasswordListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            if (passwordText.getPassword().length != 0) {
                loginButton.setEnabled(true);
            }
        }
        @Override
        public void removeUpdate(DocumentEvent e) {
            if (passwordText.getPassword().length == 0) {
                loginButton.setEnabled(false);
            }
        }
        @Override
        public void changedUpdate(DocumentEvent e) {
            //Plain text components do not fire these events
        }
    }

    class NMEAPortListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            if (useNMEACheckBox.isSelected()) {
                    aisPortText.setText(nmeaPortText.getText());
            }
        }
        @Override
        public void removeUpdate(DocumentEvent e) {
            if (useNMEACheckBox.isSelected()) {
                    aisPortText.setText(nmeaPortText.getText());
            }
        }
        @Override
        public void changedUpdate(DocumentEvent e) {
            if (useNMEACheckBox.isSelected()) {
                    aisPortText.setText(nmeaPortText.getText());
            }
        }
    }
    
    class ShortVerifier extends InputVerifier {
        @Override
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            try {
                short n = Short.parseShort(tf.getText());
            } catch (Exception e) {
                return false;
            }
            return true;
        }
    }
        
    class LongVerifier extends InputVerifier {
        @Override
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            try {
                long n = Long.parseLong(tf.getText());
            } catch (Exception e) {
                return false;
            }
            return true;
        }
    }

    class DoubleVerifier extends InputVerifier {
        @Override
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            try {
                double n = Double.parseDouble(tf.getText());
            } catch (Exception e) {
                return false;
            }
            return true;
        }
    }
        
    class SolLogin {
        private int race;
        private String boat;
        private String token = null;

        private ReentrantReadWriteLock lock;

        public SolLogin(int race, String boat) {
            lock = new ReentrantReadWriteLock();
            this.race = race;
            this.boat = boat;
        }
        
        public int getRace() {
            return race;
        }
        
        public String getBoat() {
            return boat;
        }
        
        public String getToken() {
            return token;
        }
        
        @SuppressWarnings("CallToThreadDumpStack")
        private void login()
        {
            String location;
            DocumentLoader loader;
            String cookie;
            String data;
            String csrftoken;
            int idx;
            
            try {
                location = String.format("https://%s/community/accounts/login/",
                                         getServer());
            } catch (Exception e) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, e);
                return;
            }

            System.out.printf("GET %s\n", location);

            try {
                loader = new DocumentLoader(location);
                loader.connect();

                //Get Response
                System.out.printf("%d\n", loader.getResponseCode());

                cookie = loader.getCookie();

                loader.disconnect();
            } catch (Exception e) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, e);
                return;
            }

            System.out.printf("Cookie: %s\n\n", cookie);

            try {
                idx = cookie.indexOf("csrftoken=") + 10;
                csrftoken = cookie.substring(idx, idx + 32);
            } catch (Exception s) {
                csrftoken = null;
            }
            
            location = String.format("https://%s/community/accounts/login/", getServer());
        
            try {
                data = "next=" + URLEncoder.encode(String.format("/windy/run/%d/", race), "UTF-8") +
                       "&password=" + URLEncoder.encode(String.format("%s", new String(passwordText.getPassword())), "UTF-8") +
                       "&username=" + URLEncoder.encode(String.format("%s", boat), "UTF-8");
                if (null != csrftoken) {
                    data += "&csrfmiddlewaretoken=" + URLEncoder.encode(csrftoken, "UTF-8");
                }
            } catch (Exception e) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, e);
                return;
            }

            System.out.printf("POST %s\n", location);
            System.out.printf("data=\"%s\"\n", data);

            try {
                loader = new DocumentLoader(location);
                loader.setCookie(cookie);
                loader.setPostData(data);
                loader.conn.setRequestProperty("Referer", location);
                loader.connect();

                //Get Response
                System.out.printf("\n%d\n", loader.getResponseCode());

                cookie = loader.getCookie();
                location = loader.getLocation();

                loader.disconnect();
            } catch (Exception e) {
                e.printStackTrace();
                return;
            }

            System.out.printf("Cookie: %s\n\n", cookie);

            System.out.printf("GET %s\n", location);

            try {
                loader = new DocumentLoader(location);
                loader.setCookie(cookie);
                loader.connect();

                //Get Response
                System.out.printf("%d\n", loader.getResponseCode());

                InputStream is = loader.getInputStream();
                BufferedReader rd = new BufferedReader(new InputStreamReader(is));
                String line;

                int state = 0; 
                while((line = rd.readLine()) != null) {
                    switch (state) {
                        case 0:                  
                            if (line.contains("function getToken")) {                    
                                state++;
                            }
                            break;
                        case 1:
                            if (line.contains("return")) {
                                int start = line.indexOf("\"");
                                int end = line.lastIndexOf("\"");
                                token = line.substring(start + 1, end);
                                state++;
                            }
                            break;
                    }
                    if (state > 1) {
                        break;
                    }
                }
                rd.close();

                loader.disconnect();
            } catch (Exception e) {
                e.printStackTrace();
                return;
            }

            System.out.printf("token: %s\n\n", token);
        }
    
        public void read_lock() { lock.readLock().lock(); }
        public void read_unlock() { lock.readLock().unlock(); }
        public void write_lock() { lock.writeLock().lock(); }
        public void write_unlock() { lock.writeLock().unlock(); }
    }
    
    private void dumpDocument(Document doc) {
        try {
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");

            //initialize StreamResult with File object to save to file
            StreamResult result = new StreamResult(new StringWriter());
            DOMSource source = new DOMSource(doc);
            transformer.transform(source, result);

            String xmlString = result.getWriter().toString();
            System.out.println(xmlString);
        } catch (Exception ex) {
            Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static String getHexString(byte[] b) {
        String result = "";
        for (int i = 0; i < b.length; i++) {
            result += String.format("%02X", b[i]);
        }
        return result;
    }

    private String documentMD5(Document doc) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");

            //initialize StreamResult with File object to save to file
            StreamResult result = new StreamResult(new StringWriter());
            DOMSource source = new DOMSource(doc);
            transformer.transform(source, result);

            String xmlString = result.getWriter().toString();
            
            md.update(xmlString.getBytes());
            return getHexString(md.digest());
        } catch (Exception ex) {
            Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
            return "";
        }
    }

    private long childGetLong(Element parent, String tag) {
        long l;
        try {
            Element node = (Element) parent.getElementsByTagName(tag).item(0);            
            l = Long.parseLong(node.getTextContent());
        } catch (Exception e) {
            l = 0;
        }
        return l;
    }

    private String childGetString(Element parent, String tag) {
        String s;        
        try {
            Element node = (Element) parent.getElementsByTagName(tag).item(0);
            s = node.getTextContent();
        } catch (Exception e) {
            s = "";
        }
        return s;
    }
    
    private double childGetDouble(Element parent, String tag) {
        double d;
        try {
            Element node = (Element) parent.getElementsByTagName(tag).item(0);            
            d = Double.parseDouble(node.getTextContent());
        } catch (Exception e) {
            d = 0.0;
        }
        return d;
    }
    
    class SubstitutionStream extends FilterInputStream {

        public SubstitutionStream(InputStream src) {
            super(src);
        }

        public int read() throws IOException {
                int c = super.read();

                if (c < 0)
                    return c;

                if (0 <= c && c < 0x20) {
                    if (c == 0x09 || c == 0x0a || c == 0x0d) {
                        return c;
                    }

                    String err = String.format("skip char 0x%02x", c);

                    System.out.printf("%s\n", err);
                    
                    return 0x20;
                } else {
                    return c;
                }
            
        }
        
        public int read(byte b[], int off, int len) throws IOException {
            int c = super.read(b, off, len);
            
            if (c < 0)
                return c;
            
            for (int i = 0; i < c; i++) {
                if (0 <= b[i] && b[i] < 0x20) {
                    if (b[i] != 0x09 && b[i] != 0x0a && b[i] != 0x0d) {
                              
                        String err = String.format("skip char 0x%02x", b[i]);

                        System.out.printf("%s\n", err);
                        
                        b[i] = 0x20;
                    }
                }
            }
            
            return c;
        }
    }
    
    class DocumentLoader {
        private URL url;
        private HttpURLConnection conn;
        private CookieManager manager;
        
        private int response = 0;
        private InputStream is = null;      
        private String cookie = null;
        private String location = null;
        private String postdata = null;
        
        public DocumentLoader(String data) throws URISyntaxException, IOException {
            location = data;

            manager = new CookieManager();
            manager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
            CookieHandler.setDefault(manager);

            url = new URI(location).toURL();
        
// No check certificates: https://stackoverflow.com/questions/12170396/disable-ssl-certificate-validation-of-https-connection

            conn = (HttpURLConnection)url.openConnection();

            conn.setInstanceFollowRedirects(false);

            conn.setUseCaches(false);
            conn.setDoInput(true);

            conn.setRequestProperty("Referer", location);
        }
        
        public void connect() throws IOException {
            String headerName;
            
            response = 0;
            
            if (null != postdata) {
                //Send request
                DataOutputStream wr = new DataOutputStream (conn.getOutputStream());
                wr.writeBytes(postdata);
                wr.flush();
                wr.close();
            }

            conn.connect();
            
            //Get Response
            response = conn.getResponseCode();
            
            System.out.printf("\n%d %s\n", response, conn.getResponseMessage());
 
            Object obj = conn.getContent();

            CookieStore cookieJar = manager.getCookieStore();
            List<HttpCookie> cookies = cookieJar.getCookies();
 
            System.out.printf("Cookies: ''%s''\n", cookies.toString());

            for (HttpCookie c: cookies) {
                if (null == cookie) {
                    cookie = c.toString();
                } else {
                    int idx = cookie.indexOf(c.getName());
                    if (idx == 0) {
                        int end = cookie.indexOf(";");
                        if (end > 0) {
                                cookie = cookie.substring(end + 1);
                        } else {
                                cookie = null;
                        }
                    } else if (idx > 0) {
                        String rest = cookie.substring(idx);

                        cookie = cookie.substring(0, idx - 1);
                        int end = rest.indexOf(";");
                        if (end > 0) {
                            cookie += ";" + rest.substring(end + 1);
                        }
                    }

                    if (null == cookie) {
                        cookie = c.toString();
                    } else {
                        cookie += ";" + c.toString();
                    }
                }
            }

            for (int i=1; (headerName = conn.getHeaderFieldKey(i)) != null; i++) {
                System.out.printf("%s: '%s'\n", headerName, conn.getHeaderField(i));
                if (headerName.equals("Location")) {
                    location = conn.getHeaderField(i);
                }
            }

            InputStream s = new BufferedInputStream(conn.getInputStream());
            byte[] magic = new byte[2];
            int header;

            s.mark(4);
            s.read(magic, 0, 2);
            s.reset();
            header = ((((int) magic[0]) & 0xff) << 8) | (((int) magic[1]) & 0xff);
                
            System.out.printf("magic: %02x %02x, header %04x\n", magic[0], magic[1], header);
            
            if (((magic[0] & 0x0f) == 8) && (0 == (header % 31))) {
                is = new InflaterInputStream(s);
            } else {
                is = s;
            }
        }
        
        public void setCookie(String data) {
            cookie = data;
            conn.setRequestProperty("Cookie", cookie);
        }

        public void setPostData(String data) throws ProtocolException {
            postdata = data;
            
            conn.setRequestMethod("POST");
     
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");                        
            conn.setRequestProperty("Content-Length", Integer.toString(data.getBytes().length));
       
            conn.setDoOutput(true);
        }
        
        public void disconnect() {
            conn.disconnect();
        }
        
        public int getResponseCode() {
            return response;
        }
        
        public InputStream getInputStream() {
            return new SubstitutionStream(is);
        }
                
        public String getCookie() {
            return cookie;
        }
        
        public String getLocation() {
            return location;
        }
    }
    
    class BoatTask extends TimerTask {

        private double ts = 0;
        private DocumentBuilder builder;
        private String last_md5 = "";
        
        public BoatTask() {
            try {
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                builder = factory.newDocumentBuilder();
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(1);
            }
        }
        
        @Override
        public void run() {
            String location;
            Document doc;
            DocumentLoader loader;
            InputStream is;
            String md5;
            Element node;
            Element boat;
            Element chats;
            
            sol.read_lock();
            
            location = String.format("https://%s/webclient/boat.xml?room_id=%d&timestamp=%.6f&token=%s",
                                     getServer(), 1, ts,
                                     sol.getToken());

            System.out.printf("getBoatData: %s\n", location);
            
            try {
                loader = new DocumentLoader(location);
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                sol.read_unlock();
                return;
            }
            
            try {
                loader.connect();
            } catch (IOException ex) {
                if (loader.getResponseCode() != 200) {
                    sol.read_unlock();
                    sol.write_lock();
                    sol.login();
                    sol.read_lock();
                    sol.write_unlock();
                } else {
                    Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                }
                sol.read_unlock();
                return;
            }
            
            sol.read_unlock();
            
            try {
                doc = builder.parse(loader.getInputStream());
                loader.disconnect();
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            
            // dumpDocument(doc);
            
            md5 = documentMD5(doc);
                        System.out.printf("last md5: %s md5 %s\n", last_md5, md5);

            if (0 == md5.compareTo(last_md5)) {
                return;
            }
            last_md5 = md5;
            
            node = (Element) doc.getElementsByTagName("data").item(0);
            boat = (Element) node.getElementsByTagName("boat").item(0);
            chats = (Element) node.getElementsByTagName("chats").item(0);

            double next = childGetDouble(chats, "timestamp");
            if (0.0 != next) {
                ts = next;
            }
            
            boatData.write_lock();
            
            boatData.id = childGetLong(boat, "id");
            boatData.twa = childGetDouble(boat, "twa") * 180.0 / Math.PI;
            boatData.twd = childGetDouble(boat, "twd") * 180.0 / Math.PI;
            boatData.tws = childGetDouble(boat, "tws") * 3600.0 / 1852.0;
            boatData.sog = childGetDouble(boat, "sog");
            boatData.cog = childGetDouble(boat, "cog") * 180.0 / Math.PI;
            boatData.lat = childGetDouble(boat, "lat");
            boatData.lon = childGetDouble(boat, "lon");
            boatData.dtg = childGetDouble(boat, "dtg");
            boatData.wpt = childGetLong(boat, "current_leg") + 1;
            boatData.ts = new GregorianCalendar(TimeZone.getTimeZone("GMT+00:00"));
              
            boatData.updateNMEA();
                
            boatData.write_unlock();
        }
    }

    class RaceTask extends TimerTask {
        
        private DocumentBuilder builder;
        private String last_md5 = "";
        
        public RaceTask() {
            try {
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                builder = factory.newDocumentBuilder();
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(1);
            }
        }
        
        @Override
        public void run() {
            String location;
            Document doc;
            Element node;
            Element boat;
            NodeList boats;
            DocumentLoader loader;
            InputStream is;
            String md5;
            Calendar ts;

            sol.read_lock();
            
            location = String.format("https://%s/webclient/race_%d.xml?token=%s",
                                     getServer(), sol.getRace(), sol.getToken());

            System.out.printf("getRaceData: %s\n", location);
            try {
                loader = new DocumentLoader(location);
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                sol.read_unlock();
                return;
            }
            
            try {
                loader.connect();
            } catch (IOException ex) {
                if (loader.getResponseCode() != 200) {
                    sol.read_unlock();
                    sol.write_lock();
                    sol.login();
                    sol.read_lock();
                    sol.write_unlock();
                } else {
                    Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                }
                sol.read_unlock();
                return;
            }
            
            sol.read_unlock();
            
            try {
                doc = builder.parse(loader.getInputStream());
                loader.disconnect();
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
                       
            // dumpDocument(doc);
            
            md5 = documentMD5(doc);
                        System.out.printf("last md5: %s md5 %s\n", last_md5, md5);

            if (0 == md5.compareTo(last_md5)) {
                return;
            }
            last_md5 = md5;

            node = (Element) doc.getElementsByTagName("race").item(0);
            node = (Element) node.getElementsByTagName("boats").item(0);
            boats = node.getElementsByTagName("boat");
            
            ts = new GregorianCalendar(TimeZone.getTimeZone("GMT+00:00"));
            
            raceData.write_lock();
            
            for (int i = 0; i < boats.getLength(); i++) {
                boat = (Element) boats.item(i);
                
                double dtg = childGetDouble(boat, "dtg");
                long id = childGetLong(boat, "id");
                String name = childGetString(boat, "name");
                double lat = childGetDouble(boat, "lat");
                double lon = childGetDouble(boat, "lon");
                double cog = childGetDouble(boat, "cog") * 180.0 / Math.PI;
                long ranking = childGetLong(boat, "ranking");
                long wpt = childGetLong(boat, "current_leg") + 1;
                
                raceData.updateBoat(ts, id, name, lat, lon, cog, dtg, ranking, wpt);
            }
            
            raceData.write_unlock();
        }
    }

    class CourseTask extends TimerTask {
        
        private DocumentBuilder builder;
        private String last_md5 = "";
        
        public CourseTask() {
            try {
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                builder = factory.newDocumentBuilder();
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(1);
            }
        }
        
        @Override
        public void run() {
            String location;
            Document doc;
            Element node;
            NodeList wpts;
            Element wpt, msg;
            long order;
            String name;
            String md5;
            double lat, lon;
            DocumentLoader loader;

            sol.read_lock();
            
            location = String.format("https://%s/webclient/auth_raceinfo_%d.xml?token=%s",
                                     getServer(), sol.getRace(), sol.getToken());

            System.out.printf("getCourseData: %s\n", location);
            try {
                loader = new DocumentLoader(location);
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                sol.read_unlock();
                return;
            }
            
            try {
                loader.connect();
            } catch (IOException ex) {
                if (loader.getResponseCode() != 200) {
                    sol.read_unlock();
                    sol.write_lock();
                    sol.login();
                    sol.read_lock();
                    sol.write_unlock();
                } else {
                    Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                }
                sol.read_unlock();
                return;
            }
            
            sol.read_unlock();
            
            try {
                doc = builder.parse(loader.getInputStream());
                loader.disconnect();
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
                       
            // dumpDocument(doc);
            
            md5 = documentMD5(doc);
            System.out.printf("last md5: %s md5 %s\n", last_md5, md5);
            if (0 == md5.compareTo(last_md5)) {
                return;
            }
            last_md5 = md5;

            node = (Element) doc.getElementsByTagName("race").item(0);
            msg = (Element) node.getElementsByTagName("message").item(0);
            node = (Element) node.getElementsByTagName("course").item(0);
            wpts = node.getElementsByTagName("waypoint");
        
            raceData.write_lock();
    
            raceData.updateSafety(msg.getTextContent());
            
            raceData.wptMap.clear();
            
            for (int i = 0; i < wpts.getLength(); i++) {
                wpt = (Element) wpts.item(i);
                
                order = childGetLong(wpt, "order");
                name = childGetString(wpt, "name");
                lat = childGetDouble(wpt, "lat");
                lon = childGetDouble(wpt, "lon");
                
                raceData.setWaypoint(order, name, lat, lon);
            }
            
            raceData.write_unlock();
        }
    }

    class AlmanacTask extends TimerTask {
                
        private int getInt(String line) {
            int i;
            
            i = line.indexOf(':') + 1;
            return Integer.parseInt(line.substring(i).trim(), 10);
        }
        
        private double getDouble(String line) {
            int i;
            
            i = line.indexOf(':') + 1;
            return Double.parseDouble(line.substring(i).trim());
        }
        
        @Override
        public void run() {
            String location;
            DocumentLoader loader;
            int i;
            int prn = 0;
            int health = 0;
            double e = 0;
            double t_oa = 0;
            double i_0 = 0;
            double Omegadot = 0;
            double sqrtA = 0;
            double Omega_0 = 0;
            double omega = 0;
            double M_0 = 0;
            double a_f0 = 0;
            double a_f1 = 0;
            int week;

            location = String.format("https://%s/sites/default/files/gps/almanac/current_yuma.alm",
                                     "www.navcen.uscg.gov");

            System.out.printf("getAlmanac: %s\n", location);
            try {
                loader = new DocumentLoader(location);
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                sol.read_unlock();
                return;
            }
            
            try {
                loader.connect();
            } catch (IOException ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            
            InputStream is = loader.getInputStream();
            BufferedReader rd = new BufferedReader(new InputStreamReader(is));
            String line;

            try {
                while((line = rd.readLine()) != null) {
                    if (line.startsWith("ID:")) {
                        prn = getInt(line);
                        continue;
                    } else if (line.startsWith("Health:")) {
                        health = getInt(line);
                        continue;
                    } else if (line.startsWith("Eccentricity:")) {
                        e = getDouble(line);
                        continue;
                    } else if (line.startsWith("Time of Applicability(s):")) {
                        t_oa = getDouble(line);
                        continue;
                    } else if (line.startsWith("Orbital Inclination(rad):")) {
                        i_0 = getDouble(line);
                        continue;
                    } else if (line.startsWith("Rate of Right Ascen(r/s):")) {
                        Omegadot = getDouble(line);
                        continue;
                    } else if (line.startsWith("SQRT(A)  (m 1/2):")) {
                        sqrtA = getDouble(line);
                        continue;
                    } else if (line.startsWith("Right Ascen at Week(rad):")) {
                        Omega_0 = getDouble(line);
                        continue;
                    } else if (line.startsWith("Argument of Perigee(rad):")) {
                        omega = getDouble(line);
                        continue;
                    } else if (line.startsWith("Mean Anom(rad):")) {
                        M_0 = getDouble(line);
                        continue;
                    } else if (line.startsWith("Af0(s):")) {
                        a_f0 = getDouble(line);
                        continue;
                    } else if (line.startsWith("Af1(s/s):")) {
                        a_f1 = getDouble(line);
                        continue;
                    } else if (line.startsWith("week:")) {
                        week = getInt(line);
                    } else {
                        continue;
                    }

                    satData.write_lock();
                    satData.updateSat(prn, health, e, t_oa, i_0, Omegadot, sqrtA, Omega_0, omega, M_0, a_f0, a_f1, week);
                    satData.write_unlock();
                }
            } catch (IOException ex) {
            }
        }
    }

    class ClientSocket {
        private ReentrantReadWriteLock lock;
        private Socket socket;
        
        public ClientSocket(Socket socket)
        {
            lock = new ReentrantReadWriteLock();
            this.socket = socket;
        }
        
        public InputStream getInputStream() throws IOException { return socket.getInputStream(); }
        public OutputStream getOutputStream() throws IOException { return socket.getOutputStream(); }
        
        public void close() throws IOException { socket.close(); }
        
        public void write_lock() { lock.writeLock().lock(); }
        public void write_unlock() { lock.writeLock().unlock(); }        
    }
    
    class NMEASender extends TimerTask {

        private ClientSocket socket;
        private int wpindex = 0;
        
        public NMEASender(ClientSocket socket) {
            super();
            this.socket = socket;
            System.out.printf("start NMEA sender\n");
        }
        
        @Override
        public void run() {
            OutputStream out;
            InputStream in;
            RaceData.WaypointData wpt;
            String text;
            byte [] rte;
            byte [] wpl;
            int i;
            
            boatData.read_lock();
            
            try {
                
                in = socket.getInputStream();
                socket.write_lock();
                int n = in.available();
                if (0 != n) {
                    in.skip(n);
                }
                socket.write_unlock();
                
                out = socket.getOutputStream();
                if (null != boatData.rmc) {    
                    socket.write_lock();
                    out.write(boatData.rmc);
                    socket.write_unlock();
                    
                    if (null != boatData.rmb) {
                        socket.write_lock();
                        out.write(boatData.rmb);
                        socket.write_unlock();
                    }
                    
                    socket.write_lock();
                    out.write(boatData.hdt);
                    socket.write_unlock();
                    
                    socket.write_lock();
                    out.write(boatData.vhw);
                    socket.write_unlock();
                    
                    socket.write_lock();
                    out.write(boatData.vwt);
                    socket.write_unlock();
                    
                    socket.write_lock();
                    out.write(boatData.vwr);
                    socket.write_unlock();
                    
                    socket.write_lock();
                    out.write(boatData.mwd);
                    socket.write_unlock();
                    
                    socket.write_lock();
                    out.write(boatData.gsa);
                    socket.write_unlock();
                    
                    socket.write_lock();
                    out.write(boatData.gga);
                    socket.write_unlock();
                    
                    socket.write_lock();
                    for (i = 0; i < boatData.ngsv; i++) {
                        out.write(boatData.gsv[i]);
                    }
                    socket.write_unlock();
                }
                
                if (raceData.wptMap.size() > wpindex) {
                    wpt = (RaceData.WaypointData) raceData.wptMap.values().toArray()[wpindex];

                    double alat, alon;
                    int latd, lond;
                    double latm, lonm;
                    char latsgn, lonsgn;

                    if (wpt.lat < 0.0) {
                        latsgn = 'S';
                        alat = -wpt.lat;
                    } else {
                        latsgn = 'N';
                        alat = wpt.lat;
                    }
                    latd = (int) Math.floor(alat);
                    latm = (alat - latd) * 60.0;
            
                    if (wpt.lon < 0.0) {
                        lonsgn = 'W';
                        alon = -wpt.lon;
                    } else {
                        lonsgn = 'E';
                        alon = wpt.lon;
                    }
                    lond = (int) Math.floor(alon);
                    lonm = (alon - lond) * 60.0;
                    
                    text = String.format("$GPWPL,%02d%06.3f,%c,%03d%06.3f,%c,%s",
                                         latd, latm, latsgn, lond, lonm, lonsgn, wpt.nmea_name);
                    wpl = nmeaChecksum(text);
                    socket.write_lock();
                    out.write(wpl);
                    socket.write_unlock();
                    
                    wpindex++;
                } else {
                    if (0 != wpindex) {
                        for (i = 0; i < raceData.wptMap.size(); i++) {
                            wpt = (RaceData.WaypointData) raceData.wptMap.values().toArray()[i];
                            text = String.format("$GPRTE,%d,%d,c,%s,%s",
                                                 raceData.wptMap.size(), i + 1,
                                                 raceData.nmea_name,
                                                 wpt.nmea_name);
                            rte = nmeaChecksum(text);
                            socket.write_lock();
                            out.write(rte);
                            socket.write_unlock();
                        }
                    }
                    wpindex = 0;
                }

                System.out.printf("send NMEA\n");
            } catch (IOException ex) {
                try {
                    socket.write_unlock();
                } catch (IllegalMonitorStateException e) {}
                System.out.printf("stop NMEA sender\n");
                nmeaListener.removeClient(socket);
                cancel();
            }
            
            boatData.read_unlock();
        }
    } 
    
    class NMEAListener extends Thread {
        
        private ServerSocket serverSocket;
        private LinkedList<ClientSocket> clientList = new LinkedList<ClientSocket>();
        private int numClients = 0;
        
        @Override
        public void run() {
            System.out.printf("start NMEA Listener\n");
        
            short nmeaPort = Short.parseShort(nmeaPortText.getText());
            short aisPort = Short.parseShort(aisPortText.getText());
            
            try {
                serverSocket = new ServerSocket();
                serverSocket.setReuseAddress(true);
                serverSocket.bind(new InetSocketAddress(nmeaPort));
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(1);                
            }
            
            while (! serverSocket.isClosed()) {
                ClientSocket socket;
                try {
                    socket = new ClientSocket(serverSocket.accept());
                } catch (IOException ex) {
                    continue;
                }
                
                Timer timer = new Timer();
                timer.scheduleAtFixedRate(new NMEASender(socket), 0, 1000);
                
                if (aisPort == nmeaPort) {
                    timer = new Timer();
                    timer.scheduleAtFixedRate(new AISSender(socket), 0, 1000);
                }
                
                clientList.addLast(socket);
                
                numClients++;
                nmeaConnLabel.setText(String.format("%d", numClients));
            }
            
            while (! clientList.isEmpty()) {
                ClientSocket socket = clientList.removeLast();
                try {
                    socket.close();
                } catch (IOException e) {}
            }
            
            numClients = 0;
            nmeaConnLabel.setText("");
            
            System.out.printf("exit NMEA Listener\n");
        }
        
        public void removeClient(ClientSocket socket) {
            clientList.remove(socket);
            
            try {
                socket.close();
            } catch (IOException e) {}
            
            if (0 < numClients) {
                numClients--;
            }
            if (0 < numClients) {
                nmeaConnLabel.setText(String.format("%d", numClients));
            } else {
                nmeaConnLabel.setText("");
            }
        }
        
        public void stopServer() {
            try {
                serverSocket.close();
            } catch (IOException e) {}
        }
    }   
    
    class AISSender extends TimerTask {
        
        private ClientSocket socket;
        private Long key = 0L;
        private int sequence = 0;
        
        public AISSender(ClientSocket socket) {
            super();
            this.socket = socket;
            System.out.printf("start AIS sender\n");
        }

        private void nmeaSendSOL(OutputStream out) throws IOException
        {
            String text = "$PSOLA";
            byte [] data = nmeaChecksum(text);
            out.write(data);
        }

        private void nmeaSendVDM(OutputStream out, String msg, int msgbits) throws IOException
        {
            String text, part;
            byte[] data;
            int total = msg.length();
            int start, fill;
            int i, n;
            
            if (total <= 61) {
                text = String.format("!AIVDM,%d,%d,,A,%s,%d", 1, 1, msg, msgbits % 6);
                data = nmeaChecksum(text);
                out.write(data);
                return;
            }
            
            n = (total + 1) / 60 + 1;
            start = 0;
            for (i = 1; i <= n; i++) {
                if (i == n) {
                    part = msg.substring(start);
                    fill = 6 - msgbits % 6;
                } else {
                    part = msg.substring(start, start + 60);
                    fill = 0;
                    start += 60;
                }
                text = String.format("!AIVDM,%d,%d,%d,A,%s,%d", n, i, sequence, part, fill);
                data = nmeaChecksum(text);
                out.write(data);
            }
            
            sequence = (sequence + 1) % 10;
        }
        
        private boolean aisFilter(RaceData.BoatPosition boat) {
            boolean result = false;
            
            if (aisSendSelected || aisSendRadius || aisSendRanking) {
                if (aisSendSelected && aisFilterBoatListModel.contains(boat)) {
                    return true;
                }
                if (boat.isOwnShip || !boat.isStarted || boat.isFinished) {
                    return false;
                }
                if (aisSendRanking && aisRankingStart <= boat.ranking && boat.ranking <= aisRankingEnd) {
                    return true;
                }
                if (aisSendRadius && Math.abs(boat.dtg - boatData.dtg) <= aisRadius) {
                    return true;
                }
                return false;
            } else {
                if (!aisSendNotStarted && !boat.isStarted) {
                    return false;
                }
                if (!aisSendFinished && boat.isFinished) {
                    return false;
                }
                if (!aisSendOwnShip && boat.isOwnShip) {
                    return false;
                }
                return true;
            }
        }
        
        @Override
        public void run() {
            OutputStream out;
            InputStream in;
            RaceData.BoatPosition boat;
            SortedMap<Long, RaceData.BoatPosition> tail;
            String text;
            Boolean wrap = true;
            
            raceData.read_lock();
            
            try {
                in = socket.getInputStream();
                
                socket.write_lock();
                int n = in.available();
                if (0 != n) {
                    in.skip(n);
                }
                socket.write_unlock();
                
                out = socket.getOutputStream();
                if (! raceData.boatMap.isEmpty()) {
                    socket.write_lock();
                    nmeaSendSOL(out);
                    socket.write_unlock();

                    int m = raceData.boatMap.size() / 60 + 1;
                    
                    wrap = false;
                    for (int i = 0; i < m; i++) {
                        boat = null;
                        while (null == boat) {
                            tail = raceData.boatMap.tailMap(key);
                            if (tail.isEmpty()) {
                                System.out.printf("key %d, tail isEmpty\n", key);
                                key = 0L;
                                wrap = true;
                            } else {
                                key = tail.firstKey();
                                boat = raceData.boatMap.get(key);
                                if (null == boat) {
                                    System.out.printf("key %d, boat is null?\n", key);
                                } else {
                                    System.out.printf("key %d, boat %s (%sOwnShip | %sStarted | %sFinished)\n", key, boat.name,
                                                      boat.isOwnShip ? "" : "not ",
                                                      boat.isStarted ? "" : "not ",
                                                      boat.isFinished ? "" : "not ");
                                }
                            }
                        }
                        key += 1L;
                        
                        if (aisFilter(boat)) {
                            if (null != boat.msg1) {
                                socket.write_lock();
                                nmeaSendVDM(out, boat.msg1, boat.msg1bits);
                                socket.write_unlock();
                            }
                            if (null != boat.msg5) {
                                socket.write_lock();
                                nmeaSendVDM(out, boat.msg5, boat.msg5bits);
                                socket.write_unlock();
                            }
                        }
                    }
                }
                if (wrap) {
                    if (null != raceData.msg14) {
                        socket.write_lock();
                        nmeaSendVDM(out, raceData.msg14, raceData.msg14bits);
                        socket.write_unlock();
                    }
                }
                
                System.out.printf("send AIS\n");
            } catch (IOException ex) {
                try {
                    socket.write_unlock();
                } catch (IllegalMonitorStateException m) { }
                System.out.printf("stop AIS sender\n");
                if (null != aisListener) {
                    aisListener.removeClient(socket);
                }
                cancel();
            }
                
            raceData.read_unlock();
        }
    }    

    class AISListener extends Thread {
        
        private ServerSocket serverSocket;
        private LinkedList<ClientSocket> clientList = new LinkedList<ClientSocket>();
        private int numClients = 0;
        
        @Override
        public void run() {
            System.out.printf("start AIS Listener\n");
        
            short aisPort = Short.parseShort(aisPortText.getText());
            
            try {
                serverSocket = new ServerSocket();
                serverSocket.setReuseAddress(true);
                serverSocket.bind(new InetSocketAddress(aisPort));
            } catch (Exception ex) {
                Logger.getLogger(NMEAproxy.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(1);                
            }
            
            while (! serverSocket.isClosed()) {
                ClientSocket socket;
                try {
                    socket = new ClientSocket(serverSocket.accept());
                } catch (IOException ex) {
                    continue;
                }
                
                Timer timer = new Timer();
                timer.scheduleAtFixedRate(new AISSender(socket), 0, 1000);
                
                clientList.addLast(socket);
                
                numClients++;
                aisConnLabel.setText(String.format("%d", numClients));
            }
            
            while (! clientList.isEmpty()) {
                ClientSocket socket = clientList.removeLast();
                try {
                    socket.close();
                } catch (IOException e) {}
            }
            
            numClients = 0;
            aisConnLabel.setText("");
            
            System.out.printf("exit AIS Listener\n");
        }
        
        public void removeClient(ClientSocket socket) {
            clientList.remove(socket);
            
            try {
                socket.close();
            } catch (IOException e) {}
            
            if (0 < numClients) {
                numClients--;
            }
            if (0 < numClients) {
                aisConnLabel.setText(String.format("%d", numClients));
            } else {
                aisConnLabel.setText("");
            }
        }
        
        public void stopServer() {
            try {
                serverSocket.close();
            } catch (IOException e) {}
        }
    }
    
    private static final byte[] HEX_CHAR_TABLE = {
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
    };

    private byte[] nmeaChecksum(String text)
    {
        char[] in = text.toCharArray();
        byte[] out = new byte[in.length + 5];
        byte cs = 0;
        int i;
        
        out[0] = (byte) in[0];
        for (i = 1; i < in.length; i++) {
            cs ^= (byte) in[i];
            out[i] = (byte) in[i];
        }
        
        out[i++] = '*';
        out[i++] = HEX_CHAR_TABLE[(cs >> 4) & 0xf];
        out[i++] = HEX_CHAR_TABLE[(cs) & 0xf];
        out[i++] = '\r';
        out[i++] = '\n';

        return out;
    }
    
    private final double WGS84_A = 6378137.0;
    private final double WGS84_F = 1.0 / 298.257223563;
    private final double WGS84_B = WGS84_A * (1.0 - WGS84_F);
    private final double WGS84_E = Math.sqrt(2.0 * WGS84_F - WGS84_F * WGS84_F);

    class Geodesic {
        private double lat_a;
        private double lon_a;
        private double lat_b;
        private double lon_b;
        
        private double rng;
        private double brg;
        // private double rbrg;
        
        private double a;
        private double e;
        
        public Geodesic (double latA, double lonA, double latB, double lonB) {
            lat_a = latA * Math.PI / 180.0;
            lon_a = lonA * Math.PI / 180.0;
            lat_b = latB * Math.PI / 180.0;
            lon_b = lonB * Math.PI / 180.0;

            /* This is nice, but too exact.
             * GPS receivers seem to use simple spheroid math...
             *
            double s, A, e2, s1me2, b, f;
            double U1, U2, L, B, C, uSq;
            double sinU1, cosU1, sinU2, cosU2;
            double lambda, lambdaP;
            double sinLambda, cosLambda;
            double sigma, deltaSigma;
            double sinSigma, cosSigma;
            double sinAlpha, cosSqAlpha;
            double cos2SigmaM;
            double alpha1, alpha2;
            int timeout;
        
            a = WGS84_A;
            e = WGS84_E;

            e2 = e * e;
            s1me2 = Math.sqrt(1.0 - e2);
            b = a * s1me2;
            f = 1.0 - s1me2;
            
            L = lon_b - lon_a;
            U1 = Math.atan((1.0 - f) * Math.tan(lat_a));
            U2 = Math.atan((1.0 - f) * Math.tan(lat_b));

            sinU1 = Math.sin(U1);
            cosU1 = Math.cos(U1);
            sinU2 = Math.sin(U2);
            cosU2 = Math.cos(U2);

            lambda = L;
            lambdaP = 2.0 * Math.PI;

            timeout = 20;
            do {
                sinLambda = Math.sin(lambda);
                cosLambda = Math.cos(lambda);
                sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda) +
                                     (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) *
                                     (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
                if (sinSigma == 0.) {
                    rng = 0;
                    brg = 0;
                    rbrg = 0;
                    return;
                }

                cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
                sigma = Math.atan2(sinSigma, cosSigma);
                sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
                cosSqAlpha = 1.0 - sinAlpha * sinAlpha;
                cos2SigmaM = cosSigma - 2.0 * sinU1 * sinU2 / cosSqAlpha;
                if (new Double(cos2SigmaM).isNaN())
                        cos2SigmaM = 0.0;

                C = f / 16.0 * cosSqAlpha * (4.0 + f * (4.0 - 3.0 * cosSqAlpha));

                lambdaP = lambda;
                lambda = L + (1.0 - C) * f * sinAlpha *
                             (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM)));
            } while (Math.abs(lambda - lambdaP) > 1e-12 && --timeout != 0);
            
            if (0 == timeout) {
                rng = 0;
                brg = 0;
                rbrg = 0;
                return;
            }
            
            uSq = cosSqAlpha * (a * a - b * b) / (b * b);
            A = 1.0 + uSq / 16384.0 * (4096.0 + uSq * (-768.0 + uSq * (320.0 - 175.0 * uSq)));
            B = uSq / 1024.0 * (256.0 + uSq * (-128.0 + uSq * (74.0 - 47.0 * uSq)));

            deltaSigma = B * sinSigma * (cos2SigmaM + B / 4.0 * (cosSigma * (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM) -
                            B / 6.0 * cos2SigmaM * (-3.0 + 4.0 * sinSigma * sinSigma) * (-3.0 + 4.0 * cos2SigmaM * cos2SigmaM)));
            s = b * A * (sigma - deltaSigma);
      
            rng = s / 1852.0;
            
            alpha1 = Math.atan2(cosU2 * sinLambda, cosU1 * sinU2 - sinU1 * cosU2 * cosLambda);
            if (alpha1 < 0.0) {
                brg = (alpha1 + 2.0 * Math.PI) * 180.0 / Math.PI;
            } else {
                brg = alpha1 * 180.0 / Math.PI;
            }

            alpha2 = Math.PI + Math.atan2(cosU1 * sinLambda, -sinU1 * cosU2 + cosU1 * sinU2 * cosLambda);
            if (alpha2 < 0.0) {
                rbrg = (alpha2 + 2.0 * Math.PI) * 180.0 / Math.PI;
            } else {
                rbrg = alpha2 * 180.0 / Math.PI;
            }
            */
            
            double clata, slata, clatb, slatb;
            double cdlon, sdlon, x, y, d, alpha;
            
            clata = Math.cos(lat_a);
            slata = Math.sin(lat_a);
            clatb = Math.cos(lat_b);
            slatb = Math.sin(lat_b);
            
            cdlon = Math.cos(lon_b - lon_a);
            sdlon = Math.sin(lon_b - lon_a);
            
            y = clatb * sdlon;
            x = clata * slatb - slata * clatb * cdlon;
            
            d = Math.atan2(Math.sqrt(x * x + y * y),
                           slata * slatb + clata * clatb * cdlon);
            
            rng = d * 60.0 * 180.0 / Math.PI;
            
            alpha = Math.atan2(y, x);
            if (alpha < 0.0) {
                brg = 360.0 + alpha * 180.0 / Math.PI;
            } else {
                brg = alpha * 180.0 / Math.PI;
            }
        }
        
        public double getRNG() { return rng; }
        public double getBRG() { return brg; }
        // public double getRBRG() { return rbrg; }
    }
    
    double bilinear(double x1, double y1, double x2, double y2, double x,
                    double y, double z11, double z12, double z21, double z22)
    {
        double delta;

        if (y1 == y2 && x1 == x2)
            return (z11);
        if (y1 == y2 && x1 != x2)
            return (z22 * (x - x1) + z11 * (x2 - x)) / (x2 - x1);
        if (x1 == x2 && y1 != y2)
            return (z22 * (y - y1) + z11 * (y2 - y)) / (y2 - y1);

        delta = (y2 - y1) * (x2 - x1);

        return (z22 * (y - y1) * (x - x1) + z12 * (y2 - y) * (x - x1) +
                z21 * (y - y1) * (x2 - x) + z11 * (y2 - y) * (x2 - x)) / delta;
    }

    /* return geoid separtion (WGS84 - MSL) in meters, given a lat/lot in degrees */
    double wgs84_separation(double lat, double lon)
    {
        final int GEOID_ROW = 19;
        final int GEOID_COL = 37;
        
        int [] geoid_delta = {
        /* 90S */ -30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30, -30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,
        /* 80S */ -53,-54,-55,-52,-48,-42,-38,-38,-29,-26,-26,-24,-23,-21,-19,-16,-12, -8, -4, -1,  1,  4,  4,  6,  5,  4,   2, -6,-15,-24,-33,-40,-48,-50,-53,-52,-53,
        /* 70S */ -61,-60,-61,-55,-49,-44,-38,-31,-25,-16, -6,  1,  4,  5,  4,  2,  6, 12, 16, 16, 17, 21, 20, 26, 26, 22,  16, 10, -1,-16,-29,-36,-46,-55,-54,-59,-61,
        /* 60S */ -45,-43,-37,-32,-30,-26,-23,-22,-16,-10, -2, 10, 20, 20, 21, 24, 22, 17, 16, 19, 25, 30, 35, 35, 33, 30,  27, 10, -2,-14,-23,-30,-33,-29,-35,-43,-45,
        /* 50S */ -15,-18,-18,-16,-17,-15,-10,-10, -8, -2,  6, 14, 13,  3,  3, 10, 20, 27, 25, 26, 34, 39, 45, 45, 38, 39,  28, 13, -1,-15,-22,-22,-18,-15,-14,-10,-15,
        /* 40S */  21,  6,  1, -7,-12,-12,-12,-10, -7, -1,  8, 23, 15, -2, -6,  6, 21, 24, 18, 26, 31, 33, 39, 41, 30, 24,  13, -2,-20,-32,-33,-27,-14, -2,  5, 20, 21,
        /* 30S */  46, 22,  5, -2, -8,-13,-10, -7, -4,  1,  9, 32, 16,  4, -8,  4, 12, 15, 22, 27, 34, 29, 14, 15, 15,  7,  -9,-25,-37,-39,-23,-14, 15, 33, 34, 45, 46,
        /* 20S */  51, 27, 10,  0, -9,-11, -5, -2, -3, -1,  9, 35, 20, -5, -6, -5,  0, 13, 17, 23, 21,  8, -9,-10,-11,-20, -40,-47,-45,-25,  5, 23, 45, 58, 57, 63, 51,
        /* 10S */  36, 22, 11,  6, -1, -8,-10, -8,-11, -9,  1, 32,  4,-18,-13, -9,  4, 14, 12, 13, -2,-14,-25,-32,-38,-60, -75,-63,-26,  0, 35, 52, 68, 76, 64, 52, 36,
        /* 00N */  22, 16, 17, 13,  1,-12,-23,-20,-14, -3, 14, 10,-15,-27,-18,  3, 12, 20, 18, 12,-13, -9,-28,-49,-62,-89,-102,-63, -9, 33, 58, 73, 74, 63, 50, 32, 22,
        /* 10N */  13, 12, 11,  2,-11,-28,-38,-29,-10,  3,  1,-11,-41,-42,-16,  3, 17, 33, 22, 23,  2, -3, -7,-36,-59,-90, -95,-63,-24, 12, 53, 60, 58, 46, 36, 26, 13,
        /* 20N */   5, 10,  7, -7,-23,-39,-47,-34, -9,-10,-20,-45,-48,-32, -9, 17, 25, 31, 31, 26, 15,  6,  1,-29,-44,-61, -67,-59,-36,-11, 21, 39, 49, 39, 22, 10,  5,
        /* 30N */  -7, -5, -8,-15,-28,-40,-42,-29,-22,-26,-32,-51,-40,-17, 17, 31, 34, 44, 36, 28, 29, 17, 12,-20,-15,-40, -33,-34,-34,-28,  7, 29, 43, 20,  4, -6, -7,
        /* 40N */ -12,-10,-13,-20,-31,-34,-21,-16,-26,-34,-33,-35,-26,  2, 33, 59, 52, 51, 52, 48, 35, 40, 33, -9,-28,-39, -48,-59,-50,-28,  3, 23, 37, 18, -1,-11,-12,
        /* 50N */  -8,  8,  8,  1,-11,-19,-16,-18,-22,-35,-40,-26,-12, 24, 45, 63, 62, 59, 47, 48, 42, 28, 12,-10,-19,-33, -43,-42,-43,-29, -2, 17, 23, 22,  6,  2, -8,
        /* 60N */   2,  9, 17, 10, 13,  1,-14,-30,-39,-46,-42,-21,  6, 29, 49, 65, 60, 57, 47, 41, 21, 18, 14,  7, -3,-22, -29,-32,-32,-26,-15, -2, 13, 17, 19,  6,  2,
        /* 70N */   2,  2,  1, -1, -3, -7,-14,-24,-27,-25,-19,  3, 24, 37, 47, 60, 61, 58, 51, 43, 29, 20, 12,  5, -2,-10, -14,-12,-10,-14,-12, -6, -2,  3,  6,  4,  2,
        /* 80N */   3,  1, -2, -3, -3, -3, -1,  3,  1,  5,  9, 11, 19, 27, 31, 34, 33, 34, 33, 34, 28, 23, 17, 13,  9,  4,   4,  1, -2, -2,  0,  2,  3,  2,  1,  1,  3,
        /* 90N */  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13
        }; 
        int ilat, ilon;
        int ilat1, ilat2, ilon1, ilon2;

        ilat = (int) Math.floor((90. + lat) / 10);
        ilon = (int) Math.floor((180. + lon) / 10);

        /* sanity checks to prevent segfault on bad data */
        if ((ilat > 90) || (ilat < -90)) {
            return 0.0;
        }
        if ((ilon > 180) || (ilon < -180)) {
            return 0.0;
        }

        ilat1 = ilat;
        ilon1 = ilon;
        ilat2 = (ilat < GEOID_ROW - 1) ? ilat + 1 : ilat;
        ilon2 = (ilon < GEOID_COL - 1) ? ilon + 1 : ilon;

        return bilinear(ilon1 * 10. - 180., ilat1 * 10. - 90.,
                        ilon2 * 10. - 180., ilat2 * 10. - 90.,
                        lon, lat,
                        (double)geoid_delta[ilon1 + ilat1 * GEOID_COL],
                        (double)geoid_delta[ilon2 + ilat1 * GEOID_COL],
                        (double)geoid_delta[ilon1 + ilat2 * GEOID_COL],
                        (double)geoid_delta[ilon2 + ilat2 * GEOID_COL]);
    }

    class BoatData {
        private ReentrantReadWriteLock lock;
        
        public long id = -1;
        public double twa;
        public double twd;
        public double tws;
        public double sog;
        public double cog;
        public double lat;
        public double lon;
        public double dtg;
        public long wpt;
        public Calendar ts;
        
        public byte[] rmc;
        public byte[] rmb;
        public byte[] vwt;
        public byte[] vwr;
        public byte[] mwd;
        public byte[] hdt;
        public byte[] vhw;
        public byte[] gsa;
        public byte[] gga;
        public byte[][] gsv = new byte[8][];
        public int ngsv;
        
        public BoatData() {
            lock = new ReentrantReadWriteLock();
        }
        
        public void updateNMEA() {
            String text;
            double alat, latm;
            double alon, lonm;
            int latd, lond;
            char latsgn, lonsgn;
            double tws_ms, tws_kmh;
            char rl_flag;
            double Y, a, b, bb;
            double awa, aws, aws_ms, aws_kmh;
            RaceData.WaypointData wpprev, wpdata;
            Geodesic geoG, geoA, geoB;
            double vmc, xte;
            double geoid;
            Matrix4x4 A = new Matrix4x4();
            Matrix4x4 R = new Matrix4x4();
            Matrix4x4 Q;
            double sinp, cosp, sinl, cosl;
            double[] D = new double[4];
            AzEl[] aeV = new AzEl[32];
            int[] prnV = new int[32];
            int[] prnU = new int[12];
            double PDOP, VDOP, HDOP;
            String pdop, vdop, hdop;
            double r;
            int prn;
            int i, j, nU, nV;
            
            if (lat < 0.0) {
                latsgn = 'S';
                alat = -lat;
            } else {
                latsgn = 'N';
                alat = lat;
            }
            latd = (int) Math.floor(alat);
            latm = (alat - latd) * 60.0;
            
            if (lon < 0.0) {
                lonsgn = 'W';
                alon = -lon;
            } else {
                lonsgn = 'E';
                alon = lon;
            }
            lond = (int) Math.floor(alon);
            lonm = (alon - lond) * 60.0;
            
            text = String.format("$GPRMC,%02d%02d%02d.%03d,A,%02d%06.3f,%c,%03d%06.3f,%c,%.2f,%05.1f,%02d%02d%02d,000,E,A",
                                     ts.get(Calendar.HOUR_OF_DAY),
                                 ts.get(Calendar.MINUTE),
                                 ts.get(Calendar.SECOND),
                                 ts.get(Calendar.MILLISECOND),
                                 latd, latm, latsgn,
                                 lond, lonm, lonsgn,
                                 sog, cog,
                                 ts.get(Calendar.DAY_OF_MONTH),
                                 ts.get(Calendar.MONTH) + 1,
                                 ts.get(Calendar.YEAR) % 100);
            rmc = nmeaChecksum(text);
            
            double t = (double) ts.getTimeInMillis() / 1000.0;
            LLH llh = new LLH(lat, lon, 2);
            ECEF pos = new ECEF(llh);
            
            satData.read_lock();
            
            nU = 0;
            nV = 0;
            for (prn = 1; prn <= 32; prn++) {
                ECEF sat = satData.satECEF(prn, t);
                if (null != sat) {
                    AzEl azel = pos.getAzEl(sat);
                    if (azel.getEl() > 5.0) {
                        prnV[nV] = prn;
                        aeV[nV] = azel;
                        
                        if (nU < 12 && azel.getEl() > 15.0) {
                            prnU[nU] = prn;
                        
                            r = Math.sqrt((sat.x - pos.x) * (sat.x - pos.x) +
                                          (sat.y - pos.y) * (sat.y - pos.y) +
                                          (sat.z - pos.z) * (sat.z - pos.z));
                            D[0] = (sat.x - pos.x) / r;
                            D[1] = (sat.y - pos.y) / r;
                            D[2] = (sat.z - pos.z) / r;
                            D[3] = -1;
                        
                            for (i = 0; i < 4; i++) {
                                for (j = 0; j < 4; j++) {
                                    A.set(i, j, A.get(i, j) + D[i] * D[j]);
                                }
                            }
                            
                            nU++;
                        }
                        
                        nV++;
                        
                        System.out.printf("PRN %02d: Az %8.4f El %8.4f\n", prn, azel.getAz(), azel.getEl());
                    }
                }
            }
            
            satData.read_unlock();

            if (nU > 0) {
                sinp = Math.sin(llh.lat);
                cosp = Math.cos(llh.lat);
                sinl = Math.sin(llh.lon);
                cosl = Math.cos(llh.lon);
            
                R.set(0, 0, -sinp * cosl);
                R.set(0, 1, -sinp * sinl);
                R.set(0, 2, cosp);
                R.set(1, 0, -sinl);
                R.set(1, 1, cosl);
                R.set(2, 0, cosp * cosl);
                R.set(2, 1, cosp * sinl);
                R.set(2, 2, sinp);
                R.set(3, 3, 1);
            
                Q = R.times(A.inverse()).times(R.transpose());
            
                PDOP = Math.sqrt(Q.get(0, 0) + Q.get(1, 1) + Q.get(2, 2));
                HDOP = Math.sqrt(Q.get(0, 0) + Q.get(1, 1));
                VDOP = Math.sqrt(Q.get(2, 2));
                
                pdop = String.format("%.1f", PDOP);
                hdop = String.format("%.1f", HDOP);
                vdop = String.format("%.1f", VDOP);
            } else {
                pdop = "";
                hdop = "";
                vdop = "";
            }
            
            geoid = wgs84_separation(lat, lon);
            
            text = String.format("$GPGGA,%02d%02d%02d.%03d,%02d%06.3f,%c,%03d%06.3f,%c,1,%02d,%s,%.1f,M,%.1f,M,,",
                                     ts.get(Calendar.HOUR_OF_DAY),
                                 ts.get(Calendar.MINUTE),
                                 ts.get(Calendar.SECOND),
                                 ts.get(Calendar.MILLISECOND),
                                 latd, latm, latsgn,
                                 lond, lonm, lonsgn,
                                 nU, hdop, llh.hgt, geoid);
            gga = nmeaChecksum(text);

            if (raceData.wptMap.size() > wpt) {
                wpprev = (RaceData.WaypointData) raceData.wptMap.values().toArray()[(int) wpt - 1];
                wpdata = (RaceData.WaypointData) raceData.wptMap.values().toArray()[(int) wpt];

                if (wpdata.lat < 0.0) {
                    latsgn = 'S';
                    alat = -wpdata.lat;
                } else {
                    latsgn = 'N';
                    alat = wpdata.lat;
                }
                latd = (int) Math.floor(alat);
                latm = (alat - latd) * 60.0;

                if (wpdata.lon < 0.0) {
                    lonsgn = 'W';
                    alon = -wpdata.lon;
                } else {
                    lonsgn = 'E';
                    alon = wpdata.lon;
                }
                lond = (int) Math.floor(alon);
                lonm = (alon - lond) * 60.0;

                geoG = new Geodesic(wpprev.lat, wpprev.lon, wpdata.lat, wpdata.lon);
                geoA = new Geodesic(lat, lon, wpdata.lat, wpdata.lon);
                geoB = new Geodesic(wpprev.lat, wpprev.lon, lat, lon);
                
                if (sog == 0.0) {
                    vmc = 0.0;
                } else {
                    vmc = sog * Math.cos(Math.abs(cog - geoA.getBRG()) / 180.0 * Math.PI);
                }
                
                System.out.printf("B RNG %.2f, B BRG %.2f, G BRG %.2f\n", geoB.getRNG(), geoB.getBRG(), geoG.getBRG());
                
                xte = Math.asin(Math.sin(geoB.getRNG() / (180.0 * 60.0) * Math.PI) *
                                Math.sin((geoB.getBRG() - geoG.getBRG()) / 180.0 * Math.PI)) / Math.PI * 180.0 * 60.0;
                System.out.printf("XTE %f", xte);
                
                if (xte < 0.0) {
                    rl_flag = 'R';
                } else {
                    rl_flag = 'L';
                }
                
                text = String.format("$GPRMB,A,%.2f,%c,,%s,%02d%06.3f,%c,%03d%06.3f,%c,%.2f,%.1f,%.2f,V,A",
                                     Math.abs(xte), rl_flag, wpdata.nmea_name,
                                     latd, latm, latsgn, lond, lonm, lonsgn,
                                     geoA.getRNG(), geoA.getBRG(), vmc);
                rmb = nmeaChecksum(text);
            } else {
                rmb = null;
            }

            tws_ms = tws * 1852.0 / 3600.0;
            tws_kmh = tws * 1.852;
            if (twa < 0.0) {
                rl_flag = 'L';
            } else {
                rl_flag = 'R';
            }
            
            text = String.format("$IIVWT,%05.1f,%c,%.2f,N,%.2f,M,%.2f,K",
                                 Math.abs(twa), rl_flag, tws, tws_ms, tws_kmh);
            vwt = nmeaChecksum(text);
            
            Y = Math.PI * (90.0 - Math.abs(twa)) / 180.0;
            a = tws * Math.cos(Y);
            b = tws * Math.sin(Y);
            bb = b + sog;
            
            aws = Math.sqrt(a * a + bb * bb);
            aws_ms = aws * 1852.0 / 3600.0;
            aws_kmh = aws * 1.852;
            awa = Math.atan2(a, bb) * 180.0 / Math.PI;
            
            text = String.format("$IIVWR,%05.1f,%c,%.2f,N,%.2f,M,%.2f,K",
                                 awa, rl_flag, aws, aws_ms, aws_kmh);
            vwr = nmeaChecksum(text);
            
            text = String.format("$IIHDT,%05.1f,T", cog);
            hdt = nmeaChecksum(text);
            
            text = String.format("$IIVHW,%05.1f,T,,,%.2f,N,%.2f,K",
                                 cog, sog, sog * 1.852);
            vhw = nmeaChecksum(text);
            
            text = String.format("$IIMWD,%05.1f,T,,,%.2f,N,%.2f,M",
                                 twd, tws, tws_ms);
            mwd = nmeaChecksum(text);
            
            text = String.format("$GPGSA,A,%d", nU > 3 ? 3 : 2);
            for (i = 0; i < 12; i++) {
                if (i < nU) {
                    text += String.format(",%02d", prnU[i]);
                } else {
                    text += ",";
                }
            }
            text += String.format(",%s,%s,%s", pdop, hdop, vdop);
            gsa = nmeaChecksum(text);

            ngsv = 0;
            for (i = 0; i < (nV + 3) / 4; i++) {
                text = String.format("$GPGSV,%d,%d,%02d", (nV + 3) / 4, i + 1, nV);
                for (j = i * 4; j < nV; j++) {
                    int cn0 = (int) (8.37 * Math.log(aeV[j].getEl()) + 17.33);
                    text += String.format(",%02d,%02.0f,%03.0f,%02d", prnV[j], aeV[j].getEl(), aeV[j].getAz(), cn0);
                    if (j == i * 4 + 3) {
                        break;
                    }
                }
                gsv[i] = nmeaChecksum(text);
                ngsv++;
            }
        }
        
        public void read_lock() { lock.readLock().lock(); }
        public void read_unlock() { lock.readLock().unlock(); }
        public void write_lock() { lock.writeLock().lock(); }
        public void write_unlock() { lock.writeLock().unlock(); }
    }

    private static String toAIS(String s) {
        String t = "";
        char [] a;
        int c, ct;
        int i;
        
        try {
            i = s.offsetByCodePoints(0, 0);
        } catch (IndexOutOfBoundsException e) {
            return t;
        }
        
        while (true) {
            try {
                c = s.codePointAt(i);
            } catch (StringIndexOutOfBoundsException e) {
                break;
            }
            
            if ((0x20 <= c && c <= 0x3f) || (0x41 <= c && c <= 0x5f)) {
                t += (char) c;
            } else if (0x61 <= c && c <= 0x7a) {
                t += (char) (c - 0x20);
            } else if (0xa0 <= c && c <= 0xff) {
                switch (c) {
                    case 0xad: case 0xb7:
                        t += "-";
                        break;
                    case 0xc0: case 0xc1: case 0xc2: case 0xc3:
                    case 0xc4: case 0xc5: case 0xe0: case 0xe1:
                    case 0xe2: case 0xe3: case 0xe4: case 0xe5:
                        t += "A";
                        break;
                    case 0xc6: case 0xe6:
                        t += "AE";
                        break;
                    case 0xc7: case 0xe7:
                        t += "C";
                        break;
                    case 0xc8: case 0xc9: case 0xca: case 0xcb:
                    case 0xe8: case 0xe9: case 0xea: case 0xeb:
                        t += "E";
                        break;
                    case 0xcc: case 0xcd: case 0xce: case 0xcf:
                    case 0xec: case 0xed: case 0xee: case 0xef:
                        t += "I";
                        break;
                    case 0xd0: case 0xf0:
                        t += "D";
                        break;
                    case 0xd1: case 0xf1:
                        t += "N";
                        break;
                    case 0xd2: case 0xd3: case 0xd4: case 0xd5:
                    case 0xd6: case 0xd8: case 0xf2: case 0xf3:
                    case 0xf4: case 0xf5: case 0xf6: case 0xf8:
                        t += "O";
                        break;
                    case 0xd9: case 0xda: case 0xdb: case 0xdc:
                    case 0xf9: case 0xfa: case 0xfb: case 0xfc:
                        t += "U";
                        break;
                    case 0xdd: case 0xfd: case 0xff:
                        t += "Y";
                        break;
                    case 0xde: case 0xfe:
                        t += "P";
                        break;
                    case 0xdf:
                        t += "SS";
                        break;
                }
            }

            try {
                i = s.offsetByCodePoints(0, i + 1);
            } catch (IndexOutOfBoundsException e) {
                break;
            }
        }
        
        return t;
    }

    private static String toNMEA(String s) {
        String t = "";
        char [] a;
        int c;
        int i;
        
        try {
            i = s.offsetByCodePoints(0, 0);
        } catch (IndexOutOfBoundsException e) {
            return t;
        }
        
        while (true) {
            try {
                c = s.codePointAt(i);
            } catch (StringIndexOutOfBoundsException e) {
                break;
            }
            
            if (0x20 <= c && c <= 0x7e) {
                switch (c) {
                    case '$':
                    case '*':
                    case ',':
                    case '!':
                    case '\\':
                    case '^':
                    case '~':
                        t += String.format("^%02X", c);
                        break;
                    default:
                        t += (char) c;
                        break;
                }
            } else if (0x7f <= c && c <= 0xff) {
                t += String.format("^%02X", c);
                /*
                switch (c) {
                    case 0xad: case 0xb7:
                        t += "-";
                        break;
                    case 0xc0: case 0xc1: case 0xc2: case 0xc3:
                    case 0xc4: case 0xc5:
                        t += "A";
                    case 0xe0: case 0xe1: case 0xe2: case 0xe3:
                    case 0xe4: case 0xe5:
                        t += "a";
                        break;
                    case 0xc6:
                        t += "AE";
                        break;
                    case 0xe6:
                        t += "ae";
                        break;
                    case 0xc7:
                        t += "C";
                        break;
                    case 0xe7:
                        t += "c";
                        break;
                    case 0xc8: case 0xc9: case 0xca: case 0xcb:
                        t += "E";
                        break;
                    case 0xe8: case 0xe9: case 0xea: case 0xeb:
                        t += "e";
                        break;
                    case 0xcc: case 0xcd: case 0xce: case 0xcf:
                        t += "I";
                    case 0xec: case 0xed: case 0xee: case 0xef:
                        t += "i";
                        break;
                    case 0xd0:
                        t += "D";
                        break;
                    case 0xf0:
                        t += "d";
                        break;
                    case 0xd1:
                        t += "N";
                        break;
                    case 0xf1:
                        t += "n";
                        break;
                    case 0xd2: case 0xd3: case 0xd4: case 0xd5:
                    case 0xd6: case 0xd8:
                        t += "O";
                        break;
                    case 0xf2: case 0xf3: case 0xf4: case 0xf5:
                    case 0xf6: case 0xf8:
                        t += "o";
                        break;
                    case 0xd9: case 0xda: case 0xdb: case 0xdc:
                        t += "U";
                        break;
                    case 0xf9: case 0xfa: case 0xfb: case 0xfc:
                        t += "u";
                        break;
                    case 0xdd:
                        t += "Y";
                        break;
                    case 0xfd: case 0xff:
                        t += "y";
                        break;
                    case 0xde:
                        t += "P";
                        break;
                    case 0xfe:
                        t += "p";
                        break;
                    case 0xdf:
                        t += "ss";
                        break;
                }
                */
            }

            try {
                i = s.offsetByCodePoints(0, i + 1);
            } catch (IndexOutOfBoundsException e) {
                break;
            }
        }
        
        return t;
    }

    private static byte aisBinToAscii(byte b) {
        byte a;
        
        b &= 0x3f;
        
        if (b < 40) {
            a = (byte) (b + 48);
        } else {
            a = (byte) (b + 56);
        }
        
        return a;
    }
    
    private static int aisStuffBits(int i, byte[] msg, int n, long value) {
        int offset = i / 6;
        int shift = 5 - i % 6;
        
        for (int b = n - 1; b >= 0; b--) {
            if (0 != (value & (1 << b))) {
                msg[offset] |= (1 << shift);
            }
            if (--shift < 0) {
                shift = 5;
                offset++;
            }
        }
        
        i = offset * 6 + (5 - shift);
        
        return i;
    }   
    
    class RaceData {
        private ReentrantReadWriteLock lock;
        
        class WaypointData {
            private long order;
            private String name;
            private double lat;
            private double lon;
            
            public String nmea_name;
            public String ais_name;
            
            public WaypointData(long order, String name, double lat, double lon)
            {
                this.order = order;
                this.name = name;
                this.lat = lat;
                this.lon = lon;
                
                this.nmea_name = toNMEA(this.name);
                this.ais_name = toAIS(this.name);
            }
        }
        
        class BoatPosition {
            private Calendar ts;
            private long id;
            private String name;
            private double lat = 91.0;
            private double lon;
            private double cog;
            private double dtg;
            private long ranking;
            private long wpt;
            private double sog = 102.3;
            private int finishCountdown = 3;
            
            private boolean isOwnShip = false;
            private boolean isFinished = false;
            private boolean isStarted = false;
            
            public String ais_name;
            
            public String msg1;
            public String msg5;
            public int msg1bits;
            public int msg5bits;
                        
            @SuppressWarnings("unchecked")
            public BoatPosition (long id, String name)
            {
                this.id = id;
                this.name = name;
                this.ais_name = toAIS(name);
                
                unsortedAllBoatListModel.addElement(this);
                String test = String.format(" %d ", id);
                if (aisSelectedBoats.contains(test)) {
                    aisFilterBoatListModel.addElement(this);
                }
                
                System.out.printf("new boat %d: \"%s\"\n", this.id, this.name);
            }
            
            @Override
            public String toString()
            {
                return name;
            }
            
            public void updatePosition(Calendar nts, long id, double nlat, double nlon, double ncog, double ndtg, long nranking, long nwpt) {
                String text;
                byte[] msg;
                long ais_sog, ais_cog, ais_hdg;
                long ais_lat, ais_lon;
                long ais_ts;
                Geodesic geo;
                double spd, t, alpha;
                char[] ais_name_array;
                char[] ais_dest_array;
                WaypointData wpdata;
                int i;
                
                if (lat != 91.0) {
                    if (sog == 102.3) {
                        sog = 0.0;
                    }
                    
                    System.out.printf("update: lat0 %f lon0 %f lat1 %f lon1 %f\n", lat, lon, nlat, nlon);
                    geo = new Geodesic(lat, lon, nlat, nlon);
                    System.out.printf("dst: %f\n", geo.getRNG());
                    t = (double) (nts.getTimeInMillis() - ts.getTimeInMillis()) / 1000.0;
                    
                    if (t > 0) {
                        spd = 3600.0 * geo.getRNG() / t;
                        if (0.0 != sog && 0.0 != spd) {
                            alpha = 1.0 - Math.exp(-t / 600.0);
                            sog = alpha * spd + (1.0 - alpha) * sog;
                        } else {
                            sog = spd;
                        }
                    }
                }
                
                ts = nts;
                lat = nlat;
                lon = nlon;
                cog = ncog;
                dtg = ndtg;
                ranking = nranking;
                wpt = nwpt;
                                
                boatData.read_lock();
                if (id == boatData.id) {
                    isOwnShip = true;
                }
                boatData.read_unlock();
                
                if (wptMap.size() > 0) {
                    wpdata = (RaceData.WaypointData) wptMap.values().toArray()[0];
                    if ((wpt != 1 || wpdata.lat != lat && wpdata.lon != lon)) {
                        isStarted = true;
                
                    }
                }
                    
                if (dtg == 0.0 && finishCountdown > 0) {
                    if (--finishCountdown == 0) {
                        isFinished = true;
                    }
                }

                ais_name_array = ais_name.toCharArray();

                if (wptMap.size() > wpt) {
                    wpdata = (RaceData.WaypointData) wptMap.values().toArray()[(int) wpt];
                    ais_dest_array = wpdata.ais_name.toCharArray();
                } else {
                    ais_dest_array = new char[0];
                }
                
                ais_sog = (long) Math.floor(sog * 10 + 0.5);
                ais_cog = (long) Math.floor(cog * 10 + 0.5);
                ais_lat = (long) Math.floor(lat * 600000 + 0.5);
                ais_lon = (long) Math.floor(lon * 600000 + 0.5);
                ais_hdg = (long) Math.floor(cog + 0.5);
                ais_ts = (long) ts.get(Calendar.SECOND);
                
                msg = new byte[28];
                i = 0;
                i = aisStuffBits(i, msg, 6, 1L);
                i += 2;
                i = aisStuffBits(i, msg, 30, 200000000L + id);
                if (sog == 0.0) {
                    i = aisStuffBits(i, msg, 4, 1L);
                } else {
                    i = aisStuffBits(i, msg, 4, 8L);
                }
                i = aisStuffBits(i, msg, 8, 0x80);
                i = aisStuffBits(i, msg, 10, ais_sog);
                i = aisStuffBits(i, msg, 1, 1L);
                i = aisStuffBits(i, msg, 28, ais_lon);
                i = aisStuffBits(i, msg, 27, ais_lat);
                i = aisStuffBits(i, msg, 12, ais_cog);
                i = aisStuffBits(i, msg, 9, ais_hdg);
                i = aisStuffBits(i, msg, 6, ais_ts);
                i += 4;
                i += 1;
                i += 1;
                i += 2;
                i += 3;
                i += 14;
                msg1bits = i;
                
                for (i = 0; i < msg.length; i++) {
                    msg[i] = aisBinToAscii(msg[i]);
                }

                try {
                    msg1 = new String(msg, "US-ASCII");
                } catch (Exception e) {
                    msg1 = null;
                }

                
                msg = new byte[71];
                i = 0;
                
                i = aisStuffBits(i, msg, 6, 5L);
                i += 2;
                i = aisStuffBits(i, msg, 30, 200000000L + id);
                i = aisStuffBits(i, msg, 2, 3L);
                i += 30;
                i += 42;
                for (int j = 0; j < 20; j++) {
                    char c;
                    if (j < ais_name_array.length) {
                        c = ais_name_array[j];
                    } else {
                        c = 0;
                    }
                    if ((32 <= c) && (c <= 63)) {
                        i = aisStuffBits(i, msg, 6, c);
                    } else if ((65 <= c) && (c <= 95)) {
                        i = aisStuffBits(i, msg, 6, c - 64);
                    } else {
                        i += 6;
                    }
                }
                i = aisStuffBits(i, msg, 8, 36L);
                i += 9;
                i += 9;
                i += 6;
                i += 6;
                i = aisStuffBits(i, msg, 4, 1L);
                i += 4;
                i += 5;
                i = aisStuffBits(i, msg, 5, 24L);
                i = aisStuffBits(i, msg, 6, 60L);
                i += 8;
                for (int j = 0; j < 20; j++) {
                    char c;
                    if (j < ais_dest_array.length) {
                        c = ais_dest_array[j];
                    } else {
                        c = 0;
                    }
                    if ((32 <= c) && (c <= 63)) {
                        i = aisStuffBits(i, msg, 6, c);
                    } else if ((65 <= c) && (c <= 95)) {
                        i = aisStuffBits(i, msg, 6, c - 64);
                    } else {
                        i += 6;
                    }
                }
                i = aisStuffBits(i, msg, 1, 1L);
                i += 1;
                msg5bits = i;

                for (i = 0; i < msg.length; i++) {
                    msg[i] = aisBinToAscii(msg[i]);
                }

                try {
                    msg5 = new String(msg, "US-ASCII");
                } catch (Exception e) {
                    msg5 = null;
                }
            }
        }
        
        public TreeMap<Long, BoatPosition> boatMap = new TreeMap<Long, BoatPosition>();
        public TreeMap<Long, WaypointData> wptMap = new TreeMap<Long, WaypointData>();
        public long id;
        public String name;
        public String nmea_name;
        public String safety;
        public String ais_safety;
        public String msg14;
        public int msg14bits;
        
        public RaceData() {
            lock = new ReentrantReadWriteLock();
        }
        
        public void updateBoat(Calendar ts, long id, String name, double lat, double lon, double cog, double dtg, long ranking, long wpt)
        {
            BoatPosition boat;
            WaypointData wpdata;
            
            boat = boatMap.get(id);
            if (null == boat) {
                boat = new BoatPosition(id, name);
                boatMap.put(id, boat);
            }
            if (! boat.name.equals(name)) {
                boat.name = name;
                boat.ais_name = toAIS(boat.name);
            }
            boat.updatePosition(ts, id, lat, lon, cog, dtg, ranking, wpt);
        }
        
        public void setWaypoint(long order, String name, double lat, double lon)
        {
            WaypointData wpt;
            
            wpt = new WaypointData(order, name, lat, lon);
            wptMap.put(order, wpt);
        }
        
        public void updateSafety(String text)
        {
            byte [] msg;
            char [] ais_safety_array;
            int i, n;
            
            if (null == safety || ! safety.equals(text)) {
                safety = text;
                ais_safety = toAIS(text);
                
                ais_safety_array = ais_safety.toCharArray();
                n = ais_safety_array.length;
                if (n > 161) {
                    n = 161;
                }
                
                msg = new byte[(40 + 6 * n + 5) / 6];
                i = 0;
                i = aisStuffBits(i, msg, 6, 14L);
                i += 2;
                i = aisStuffBits(i, msg, 30, 2000000L + id);
                i += 2;
                for (int j = 0; j < n; j++) {
                    char c = ais_safety_array[j];
                    if ((32 <= c) && (c <= 63)) {
                        i = aisStuffBits(i, msg, 6, c);
                    } else if ((65 <= c) && (c <= 95)) {
                        i = aisStuffBits(i, msg, 6, c - 64);
                    } else {
                        i += 6;
                    }
                }
                msg14bits = i;
                
                for (i = 0; i < msg.length; i++) {
                    msg[i] = aisBinToAscii(msg[i]);
                }

                try {
                    msg14 = new String(msg, "US-ASCII");
                } catch (Exception e) {
                    msg14 = null;
                }

            }
        }
        
        public void read_lock() { lock.readLock().lock(); }
        public void read_unlock() { lock.readLock().unlock(); }
        public void write_lock() { lock.writeLock().lock(); }
        public void write_unlock() { lock.writeLock().unlock(); }
    }
    
    class AzEl {
        private double az;
        private double el;
        
        public AzEl() { }
        
        public AzEl(double az, double el)
        {
            this.az = az * Math.PI / 180.0;
            this.el = el * Math.PI / 180.0;
        }
        
        public double getAz() {
            return az * 180.0 / Math.PI;
        }
        
        public double getEl() {
            return el * 180.0 / Math.PI;
        }
    }
    
    class LLH {
        private double lat;
        private double lon;
        private double hgt;
        
        public LLH(double lat, double lon, double hgt) {
            this.lat = lat * Math.PI / 180.0;
            this.lon = lon * Math.PI / 180.0;
            this.hgt = hgt;
        }
        
        public double getLat() {
            return lat * 180.0 / Math.PI;
        }
        
        public double getLon() {
            return lon * 180.0 / Math.PI;
        }
        
        public double getHgt() {
            return hgt;
        }
    }
    
    class ECEF {
        private double x;
        private double y;
        private double z;
        
        public final int LLH = 1;
        
        public ECEF(double x, double y, double z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }
        
        public ECEF(LLH pos) {
            double clat, slat, clon, slon;
            double inv, e2, N;
            
            clat = Math.cos(pos.lat);
            slat = Math.sin(pos.lat);
            clon = Math.cos(pos.lon);
            slon = Math.sin(pos.lon);
            
            inv = WGS84_B / WGS84_A;
            e2 = 1.0 - inv * inv;
            N = WGS84_A / Math.sqrt(1.0 - e2 * slat * slat);
            
            x = (N + pos.hgt) * clat * clon;
            y = (N + pos.hgt) * clat * slon;
            z = (N * (1.0 - e2) + pos.hgt) * slat;
        }
        
        public double getX() {
            return x;
        }
        
        public double getY() {
            return y;
        }
        
        public double getZ() {
            return z;
        }
        
        public AzEl getAzEl(ECEF sat) {
            AzEl azel = new AzEl();
            double p, R, D;
            double n_x, n_y, n_z;
            double e_x, e_y, e_z;
            double u_x, u_y, u_z;
            double d_x, d_y, d_z;
            double dot, el, az;
            double n, e;

            p = Math.sqrt(x * x + y * y);
            R = Math.sqrt(x * x + y * y + z * z);

            D = Math.sqrt((sat.x - x) * (sat.x - x) +
                          (sat.y - y) * (sat.y - y) +
                          (sat.z - z) * (sat.z - z));

            e_x = -y / p;
            e_y = x / p;
            e_z = 0;
            n_x = -x * z / (p * R);
            n_y = -y * z / (p * R);
            n_z = p / R;
            u_x = x / R;
            u_y = y / R;
            u_z = z / R;

            d_x = (sat.x - x) / D;
            d_y = (sat.y - y) / D;
            d_z = (sat.z - z) / D;

            dot = (u_x * d_x + u_y * d_y + u_z * d_z);
            if (dot > 1.0) {
                el = Math.PI / 2.0;
            } else if (dot < -1.0) {
                el = -Math.PI / 2.0;
            } else {
                el = Math.asin(dot);
            }

            n = n_x * d_x + n_y * d_y + n_z * d_z;
            e = e_x * d_x + e_y * d_y + e_z * d_z;

            az = Math.atan2(e, n);
            if (az < 0.0) {
                az += 2.0 * Math.PI;
            }
            
            azel.az = az;
            azel.el = el;
            
            return azel;
        }
    }
    
    class SatData {
        private ReentrantReadWriteLock lock;
        
        public SatData() {
            lock = new ReentrantReadWriteLock();
            almanac = new Almanac[32];
        }
        
        private final double MU = 3.986005e14;
        private final double OMEGADOT_E = 7.2921151467e-5;
        
        private final double WEEK = 7.0 * 24.0 * 3600.0;
        private final double HALFWEEK = WEEK / 2.0;
        
        private final long HALFWRAP = 512 * 7 * 24 * 3600 * 1000;
        
        class Almanac {
            int prn;
            int health;
            double e;
            double t_oa;
            double i_0;
            double Omegadot;
            double sqrtA;
            double Omega_0;
            double omega;
            double M_0;
            double a_f0;
            double a_f1;
            int week;
            
            double TOA;
        }
        
        private Almanac[] almanac;
        
        public void updateSat(int prn, int health, double e, double t_oa,
                              double i_0, double Omegadot, double sqrtA,
                              double Omega_0, double omega, double M_0,
                              double a_f0, double a_f1, int week)
        {
            Almanac a;
            
            if (null == almanac[prn - 1]) {
                almanac[prn - 1] = new Almanac();
            }
            
            a = almanac[prn - 1];
            
            a.prn = prn;
            a.health = health;
            a.e = e;
            a.t_oa = t_oa;
            a.i_0 = i_0;
            a.Omegadot = Omegadot;
            a.sqrtA = sqrtA;
            a.Omega_0 = Omega_0;
            a.omega = omega;
            a.M_0 = M_0;
            a.a_f0 = a_f0;
            a.a_f1 = a_f1;
            
            week = gpsFixupWeek(week, t_oa);
            a.TOA = gpsTime(week, t_oa);
            
            System.out.printf("prn %02d health %03d e %f t_oa %f i_0 %f Omegadot %f sqrtA %f Omega_0 %f omega %f M_0 %f a_f0 %f a_f1 %f week %d\n",
                              prn, health, e, t_oa, i_0, Omegadot, sqrtA, Omega_0, omega, M_0, a_f0, a_f1, week);
        }
        
        private double gpsTime(int gpsweek, double gpssec) {
            Calendar t = new GregorianCalendar(TimeZone.getTimeZone("GMT+00:00"));
            int jd, k, m, n, mm;
            double days, fjd;
            int hour, min, sec;
            int year, mon, mday;
            
            days = (double) gpsweek * 7.0;
            days += gpssec / 86400.0;
            
            jd = (int) days + 2444244;
            fjd = days - (int) days + 1.0;
            while (fjd >= 1.0) {
                jd++;
                fjd -= 1.0;
            }
            
            fjd *= 24.0;
            hour = (int) fjd;
            
            fjd = (fjd - (double) hour) * 60.0;
            min = (int) fjd;
            
            fjd = (fjd - (double) min) * 60.0;
            sec = (int) fjd;
            
            fjd = fjd - (double) sec;
            
            k = jd + 68569;
            n = 4 * k / 146097;
            
            k = k - (146097 * n + 3) / 4;
            m = 4000 * (k + 1) / 1461001;
            k = k - 1461 * m / 4 + 31;
            
            mm = 80 * k / 2447;
            mday = k - 2447 * mm / 80;
            
            k = mm / 11;
            mon = mm + 2 - 12 * k - 1;
            year = 100 * (n - 49) + m + k;
        
            t.clear();
            t.set(year, mon, mday, hour, min, sec);
            
            return (double) (t.getTimeInMillis() / 1000) + fjd;
        }
        
        private int gpsFixupWeek(int gpsweek, double gpssec) {
            long ut, gt;
            
            ut = System.currentTimeMillis() / 1000;
            gt = (long) gpsTime(gpsweek, gpssec);
            
            while (ut - gt > HALFWRAP) {
                gpsweek += 1024;
                gt = (long) gpsTime(gpsweek, gpssec);
            }
        
            return gpsweek;
        }
        
        public ECEF satECEF(int prn, double t) {
            Almanac a;
            double A, n_0, M_k, E_k, v_k, Phi_k, r_k;
            double t_k, x_kt, y_kt, Omega_k;
            double sin_E_k = 0, cos_E_k = 0, diff;
            double sin_i_k, cos_i_k;
            double sin_Omega_k, cos_Omega_k;
            double x, y, z;
            int i;

            a = almanac[prn - 1];
            if (null == a) {
                return null;
            }
            if (0 != a.health) {
                return null;
            }
            
            A = a.sqrtA * a.sqrtA;
            n_0 = Math.sqrt(MU / (A * A * A));

            t_k = t - a.TOA;
            if (t_k > HALFWEEK)
                t_k -= WEEK;
            if (t_k < -HALFWEEK)
                t_k += WEEK;
        
            M_k = a.M_0 + n_0 * t_k;

            /* solve M_k = E_k - e * sin E_k */

            E_k = M_k;
            for (i = 0; i < 16; i++) {      /* Avoid possible endless loop. */
                sin_E_k = Math.sin(E_k);
                cos_E_k = Math.cos(E_k);

                diff = (E_k - a.e * sin_E_k - M_k) / (1.0 - a.e * cos_E_k);

                if (Math.abs(diff) < 1e-14)
                        break;

                E_k -= diff;
            }

            v_k = Math.atan2((Math.sqrt(1.0 - a.e * a.e) * sin_E_k),
                             (cos_E_k - a.e));
            if (v_k < 0) {
                v_k += 2 * Math.PI;
            }

            Phi_k = v_k + a.omega;

            r_k = A * (1 - a.e * cos_E_k);

            sin_i_k = Math.sin(a.i_0);
            cos_i_k = Math.cos(a.i_0);

            x_kt = r_k * Math.cos(Phi_k);
            y_kt = r_k * Math.sin(Phi_k);

            Omega_k = a.Omega_0 + (a.Omegadot - OMEGADOT_E) * t_k
                                - OMEGADOT_E * a.t_oa;

            sin_Omega_k = Math.sin(Omega_k);
            cos_Omega_k = Math.cos(Omega_k);

            x = x_kt * cos_Omega_k - y_kt * cos_i_k * sin_Omega_k;
            y = x_kt * sin_Omega_k + y_kt * cos_i_k * cos_Omega_k;
            z = y_kt * sin_i_k;

            return new ECEF(x, y, z);
        }
        
        public void read_lock() { lock.readLock().lock(); }
        public void read_unlock() { lock.readLock().unlock(); }
        public void write_lock() { lock.writeLock().lock(); }
        public void write_unlock() { lock.writeLock().unlock(); }       
    }
    
    class BoatComparator implements Comparator {
        @Override
        public int compare(Object o0, Object o1) {
            String n0 = ((RaceData.BoatPosition) o0).name;
            String n1 = ((RaceData.BoatPosition) o1).name;
                    
            return n0.compareToIgnoreCase(n1);
        }
    }
            

    private SolLogin sol = null;
    
    private BoatData boatData = new BoatData();
    private RaceData raceData = new RaceData();
    private SatData satData = new SatData();
    
    private DefaultListModel unsortedAllBoatListModel = new DefaultListModel();
    private SortedListModel allBoatListModel = new SortedListModel(unsortedAllBoatListModel, SortOrder.ASCENDING, new BoatComparator());

    private DefaultListModel aisFilterBoatListModel = new DefaultListModel();
    
    private DefaultListModel unsortedSelectedBoatListModel = new DefaultListModel();
    private SortedListModel selectedBoatListModel = new SortedListModel(unsortedSelectedBoatListModel, SortOrder.ASCENDING, new BoatComparator());
    
    private Timer getBoatTimer;
    private Timer getRaceTimer;
    private Timer getCourseTimer;
    private Timer getAlmanacTimer;
    private NMEAListener nmeaListener;
    private AISListener aisListener;

    private static Preferences globalprefs;
    private static Preferences boatprefs;
    
    private static boolean aisSendNotStarted;
    private static boolean aisSendFinished;
    private static boolean aisSendOwnShip;
    private static boolean aisSendSelected;
    private static boolean aisSendRadius;
    private static boolean aisSendRanking;
    private static double aisRadius;
    private static long aisRankingStart;
    private static long aisRankingEnd;
    private static String aisSelectedBoats;
    
    private static NMEAproxy gui;
    private static java.net.InetAddress ipAddr;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        final int race;
        final String boat;
        
        if (args.length != 2) {
            System.err.printf("usage: %s <race> <boat>\n", "NMEAproxy");
            return;
        }
        
        try {
            race = Integer.parseInt(args[0]);
        } catch (NumberFormatException e) {
            System.err.printf("%s: can't parse race \"%s\"\n", "NMEAproxy", args[0]);
            return;
        }
        boat = args[1];
        
        try {
            ipAddr = java.net.InetAddress.getLocalHost();
        } catch (java.net.UnknownHostException e) {
            System.err.printf("%s: can't find local IP address\n", "NMEAproxy");
            return;
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Locale.setDefault(Locale.US);
                
                setupEnterActionForAllButtons();
                
                globalprefs = Preferences.userRoot().node("/net/brainaid/sol/NMEAproxy");
                boatprefs = Preferences.userRoot().node(String.format("/net/brainaid/sol/NMEAproxy/%d/%s", race, boat));
    
                aisSendNotStarted = boatprefs.getBoolean("aisSendNotStarted", false);
                aisSendFinished = boatprefs.getBoolean("aisSendFinished", false);
                aisSendOwnShip = boatprefs.getBoolean("aisSendOwnShip", true);
                aisSendSelected = boatprefs.getBoolean("aisSendSelected", false);
                aisSendRadius = boatprefs.getBoolean("aisSendRadius", false);
                aisSendRanking = boatprefs.getBoolean("aisSendRanking", false);
                aisSelectedBoats = boatprefs.get("aisSelectedBoats", "");
                try {
                    aisRadius = Double.parseDouble(boatprefs.get("aisRadius", "5.0"));
                } catch (Exception e) {
                    aisRadius = 0.0;
                }
                try {
                    aisRankingStart = Long.parseLong(boatprefs.get("aisRankingStart", "1"));
                } catch (Exception e) {
                    aisRankingStart = 0;
                }
                try {
                    aisRankingEnd = Long.parseLong(boatprefs.get("aisRankingEnd", "10"));
                } catch (Exception e) {
                    aisRankingEnd = 0;
                }
                
                gui = new NMEAproxy();
                gui.raceLabel.setText(Integer.toString(race));
                gui.boatLabel.setText(boat);
                gui.ipAddressText.setText(ipAddr.toString());
                
                gui.nmeaPortText.setText(globalprefs.get("nmeaPort", "5010"));
                gui.aisPortText.setText(globalprefs.get("aisPort", "5011"));
                gui.useNMEACheckBox.setSelected(globalprefs.getBoolean("aisUseNMEAPort", false));

                gui.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBoat;
    private javax.swing.JLabel aisConnLabel;
    private javax.swing.JButton aisFilterButton;
    private javax.swing.JButton aisFilterCancelButton;
    private javax.swing.JDialog aisFilterDialog;
    private javax.swing.JButton aisFilterOkButton;
    private javax.swing.JCheckBox aisFinishedCheckBox;
    private javax.swing.JPanel aisGlobalFilterPanel;
    private javax.swing.JCheckBox aisNotStartedCheckBox;
    private javax.swing.JCheckBox aisOwnShipCheckBox;
    private javax.swing.JPanel aisPanel;
    private javax.swing.JLabel aisPortLabel;
    private javax.swing.JTextField aisPortText;
    private javax.swing.JPanel aisRadiusFilterPanel;
    private javax.swing.JTextField aisRadiusText;
    private javax.swing.JLabel aisRadiusUnitLabel;
    private javax.swing.JTextField aisRankingEndText;
    private javax.swing.JPanel aisRankingFilterPanel;
    private javax.swing.JTextField aisRankingStartText;
    private javax.swing.JLabel aisRankingToLabel;
    private javax.swing.JPanel aisSelectedFilterPanel;
    private javax.swing.JCheckBox aisSendRadiusCheckBox;
    private javax.swing.JCheckBox aisSendRankingCheckBox;
    private javax.swing.JCheckBox aisSendSelectedCheckBox;
    private javax.swing.JList allBoatsList;
    private javax.swing.JScrollPane allBoatsScrollPane;
    private javax.swing.JLabel boatLabel;
    private javax.swing.JPanel instrumentsPanel;
    private javax.swing.JTextField ipAddressText;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel nmeaAddressLabel;
    private javax.swing.JLabel nmeaConnLabel;
    private javax.swing.JLabel nmeaPortLabel;
    private javax.swing.JTextField nmeaPortText;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordText;
    private javax.swing.JButton quitButton;
    private javax.swing.JLabel raceLabel;
    private javax.swing.JButton removeBoat;
    private javax.swing.JList selectedBoatsList;
    private javax.swing.JScrollPane selectedBoatsScrollPane;
    private javax.swing.JToggleButton sendButton;
    private javax.swing.JCheckBox useNMEACheckBox;
    // End of variables declaration//GEN-END:variables
}
